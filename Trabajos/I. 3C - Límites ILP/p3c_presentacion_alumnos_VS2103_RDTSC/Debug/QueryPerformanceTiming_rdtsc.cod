; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31104.0 

	TITLE	C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\Debug\QueryPerformanceTiming_rdtsc.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F32AA0BD_concurrencysal@h DB 01H
__5A3A63C4_sal@h DB 01H
__6BEC7B3D_vadefs@h DB 01H
__1BC54112_vcruntime@h DB 01H
__6569C2CA_corecrt@h DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__FF18040F_xkeycheck@h DB 01H
__3779B844_yvals_core@h DB 01H
__AD973B64_limits@h DB 01H
__62B17962_climits DB 01H
__EDB62062_vcruntime_new@h DB 01H
__5858FF13_vcruntime_new_debug@h DB 01H
__49916C16_crtdbg@h DB 01H
__41ABBF80_crtdefs@h DB 01H
__F1399E15_use_ansi@h DB 01H
__501EED2F_yvals@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__91D68F2D_math@h DB 01H
__6C20D4D3_corecrt_malloc@h DB 01H
__C9393812_stddef@h DB 01H
__D493B9BD_corecrt_search@h DB 01H
__1473E23E_corecrt_wstdlib@h DB 01H
__B49664B7_stdlib@h DB 01H
__E65E5B90_cstdlib DB 01H
__0A37AC5C_xtr1common DB 01H
__D986D001_intrin0@inl@h DB 01H
__5886068B_intrin0@h DB 01H
__38806D73_cmath DB 01H
__A913C05D_cstdio DB 01H
__CDDAF8CA_errno@h DB 01H
__4041E9ED_vcruntime_string@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__AACCF370_cstring DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__5DB64B66_corecrt_wctype@h DB 01H
__CB8D9B53_corecrt_wdirect@h DB 01H
__A9063C41_corecrt_share@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__61BDDCD5_corecrt_wprocess@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__64F617E8_types@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__3398160E_cwchar DB 01H
__4395813D_cstddef DB 01H
__E9ECD68E_initializer_list DB 01H
__264C4909_xstddef DB 01H
__70589338_iosfwd DB 01H
__13E1155B_stdint@h DB 01H
__5B00BAED_cstdint DB 01H
__B1B1C2C4_type_traits DB 01H
__D153DE1B_utility DB 01H
__7F396DA6_xutility DB 01H
__6E95DAE6_iterator DB 01H
__5B81F060_share@h DB 01H
__4926392B___msvc_system_error_abi@hpp DB 01H
__3432B4A6_cerrno DB 01H
__20BB4341_malloc@h DB 01H
__3C5D8049_corecrt_terminate@h DB 01H
__18EF2578_eh@h DB 01H
__50B6FA41_vcruntime_exception@h DB 01H
__89F4D116_exception DB 01H
__158E8E48_float@h DB 01H
__DA570BDA_cfloat DB 01H
__93CAE39E_isa_availability@h DB 01H
__BCB146BE_limits DB 01H
__F32E7743_new DB 01H
__83F85DC0_xatomic@h DB 01H
__BBC6BDD8_xmemory DB 01H
__CF153B44_xstring DB 01H
__00BAEB4B_stdexcept DB 01H
__74E16614_xcall_once@h DB 01H
__F88BF820_xerrc@h DB 01H
__A0B61CF9_time@h DB 01H
__FE33F17B_ctime DB 01H
__C9FD8EE7_xtimec@h DB 01H
__9077A9A6_xthreads@h DB 01H
__D7841A7C_atomic DB 01H
__CBBC7434_system_error DB 01H
__A784D2C3_vcruntime_typeinfo@h DB 01H
__0FE69EBF_typeinfo DB 01H
__001F4A30_memory DB 01H
__2C5A1D3F_xfacet DB 01H
__61AD4BC5___msvc_xlocinfo_types@hpp DB 01H
__B2D2BA86_ctype@h DB 01H
__A6D827FA_cctype DB 01H
__A3D09DBA_locale@h DB 01H
__75F28741_clocale DB 01H
__106F7D77_xlocinfo DB 01H
__102B4F75_xlocale DB 01H
__298A0A64_xiosbase DB 01H
__021A53F7_streambuf DB 01H
__8EAC2962_xlocnum DB 01H
__0BE34D55_ios DB 01H
__033B95B1_ostream DB 01H
__60EBA08B_istream DB 01H
__1D4017B9_iostream DB 01H
__8382FD58_setjmp@h DB 01H
__34193596_mmintrin@h DB 01H
__9B102D46_xmmintrin@h DB 01H
__FE72A48A_emmintrin@h DB 01H
__21D3CC03_pmmintrin@h DB 01H
__910ABF81_tmmintrin@h DB 01H
__B831AA02_smmintrin@h DB 01H
__DD5323CE_nmmintrin@h DB 01H
__08E8D980_wmmintrin@h DB 01H
__C37C9487_zmmintrin@h DB 01H
__F468364D_immintrin@h DB 01H
__4EABD708_ammintrin@h DB 01H
__A08FDA25_mm3dnow@h DB 01H
__A5B4412F_intrin@h DB 01H
__D0DFFAC6_winpackagefamily@h DB 01H
__D0D0F397_winapifamily@h DB 01H
__94A3FDDD_sdkddkver@h DB 01H
__AF2AD727_excpt@h DB 01H
__273EAB94_stdarg@h DB 01H
__1C9F390F_specstrings_undef@h DB 01H
__36A21E95_specstrings_strict@h DB 01H
__452FE810_sdv_driverspecs@h DB 01H
__30F344B3_driverspecs@h DB 01H
__BD886E18_specstrings@h DB 01H
__BF9C347F_kernelspecs@h DB 01H
__79C7FC57_basetsd@h DB 01H
__D545DD43_guiddef@h DB 01H
__DF4F952E_pshpack4@h DB 01H
__7FCD0577_poppack@h DB 01H
__DBC2E99C_pshpack2@h DB 01H
__D6556C4A_pshpack8@h DB 01H
__D98457C5_pshpack1@h DB 01H
__614C4572_apiset@h DB 01H
__8500295D_ktmtypes@h DB 01H
__D5DDFBF3_winnt@h DB 01H
__156BD51A_minwindef@h DB 01H
__F9B9A8F7_windef@h DB 01H
__BD2C4590_apisetcconv@h DB 01H
__18251742_minwinbase@h DB 01H
__23611203_apiquery2@h DB 01H
__C914CD48_processenv@h DB 01H
__996311FD_fileapi@h DB 01H
__41AEF397_fileapifromapp@h DB 01H
__65579FF3_debugapi@h DB 01H
__476FCB5A_utilapiset@h DB 01H
__089D2E42_handleapi@h DB 01H
__B16F04F5_errhandlingapi@h DB 01H
__81CCB02F_fibersapi@h DB 01H
__A9B4C5F0_namedpipeapi@h DB 01H
__C209F2C8_profileapi@h DB 01H
__34C22DC8_heapapi@h DB 01H
__8A238485_ioapiset@h DB 01H
__4826BA69_synchapi@h DB 01H
__6A31599C_interlockedapi@h DB 01H
__439612F0_processthreadsapi@h DB 01H
__7BB37CFA_sysinfoapi@h DB 01H
__5733279A_memoryapi@h DB 01H
__6D078C0D_enclaveapi@h DB 01H
__3663CE50_threadpoollegacyapiset@h DB 01H
__E16717D9_threadpoolapiset@h DB 01H
__4A6035CC_jobapi@h DB 01H
__62EEB553_jobapi2@h DB 01H
__9F22E7EF_wow64apiset@h DB 01H
__E86B4A9A_libloaderapi@h DB 01H
__EB536E54_securitybaseapi@h DB 01H
__E915C287_namespaceapi@h DB 01H
__C66F44F2_systemtopologyapi@h DB 01H
__B6175B28_processtopologyapi@h DB 01H
__9E4AD838_securityappcontainer@h DB 01H
__F599FDAE_realtimeapiset@h DB 01H
__D4435474_winerror@h DB 01H
__F94F31E6_timezoneapi@h DB 01H
__B3ED30D4_winbase@h DB 01H
__E9F7D11F_wingdi@h DB 01H
__AC21C382_tvout@h DB 01H
__DB057BA3_winuser@h DB 01H
__A1BAD304_datetimeapi@h DB 01H
__30E2BD27_winnls@h DB 01H
__B7FF4B97_stringapiset@h DB 01H
__66C87297_wincontypes@h DB 01H
__1317218F_consoleapi@h DB 01H
__8D62D26D_consoleapi2@h DB 01H
__8CA0B85A_consoleapi3@h DB 01H
__CE39E65B_wincon@h DB 01H
__F6801ACC_verrsrc@h DB 01H
__1CB844D9_winver@h DB 01H
__D0CFA71C_reason@h DB 01H
__F3D58382_winreg@h DB 01H
__34C28572_wnnc@h DB 01H
__0617DE59_winnetwk@h DB 01H
__93AC9EF8_cderr@h DB 01H
__3AE29FFA_dde@h DB 01H
__48250249_ddeml@h DB 01H
__4605C6DD_dlgs@h DB 01H
__C826BBA2_lzexpand@h DB 01H
__B8DFB118_mmsyscom@h DB 01H
__EDC2A662_mciapi@h DB 01H
__87B17D5B_mmiscapi@h DB 01H
__0C4862FC_mmiscapi2@h DB 01H
__83F5D08C_playsoundapi@h DB 01H
__CA3F1D44_mmeapi@h DB 01H
__BD2270BE_timeapi@h DB 01H
__397CAA2F_joystickapi@h DB 01H
__05A21AEE_mmsystem@h DB 01H
__6E1DF0B6_nb30@h DB 01H
__75098885_rpcdcep@h DB 01H
__D8AC8DD5_rpcdce@h DB 01H
__2F1118EF_rpcnsi@h DB 01H
__0DE10DFC_rpcnterr@h DB 01H
__4497164E_rpcasync@h DB 01H
__06CA6763_rpc@h DB 01H
__C32EC2F2_shellapi@h DB 01H
__B289ECB8_winperf@h DB 01H
__07EA6B7C_inaddr@h DB 01H
__9ED0251E_winsock@h DB 01H
__FD938996_bcrypt@h DB 01H
__4E32BFB9_ncrypt@h DB 01H
__815AA9AD_dpapi@h DB 01H
__0B2E95FF_wincrypt@h DB 01H
__288F6C52_winefs@h DB 01H
__B3F2ECA2_rpcnsip@h DB 01H
__AFB43543_rpcsal@h DB 01H
__16A21838_rpcndr@h DB 01H
__5314805F_wtypesbase@h DB 01H
__6EEE3703_wtypes@h DB 01H
__A7113148_winioctl@h DB 01H
__C595A37C_winsmcrd@h DB 01H
__42C56FB7_winscard@h DB 01H
__C4703BCA_prsht@h DB 01H
__D4D77F19_winspool@h DB 01H
__B47185B4_unknwnbase@h DB 01H
__B64C33F8_objidlbase@h DB 01H
__EA871F04_cguid@h DB 01H
__C78732AB_combaseapi@h DB 01H
__744BF5DA_unknwn@h DB 01H
__66C491E7_objidl@h DB 01H
__A217658B_oaidl@h DB 01H
__8485F416_propidlbase@h DB 01H
__65805CE1_coml2api@h DB 01H
__C7AD586F_oleidl@h DB 01H
__CBE55221_servprov@h DB 01H
__5B1E268A_msxml@h DB 01H
__1B3D3678_urlmon@h DB 01H
__EC5BC72C_propidl@h DB 01H
__0DD0E8F8_objbase@h DB 01H
__6DA674A0_oleauto@h DB 01H
__F7931962_ole2@h DB 01H
__870E9EB1_commdlg@h DB 01H
__A118E6DC_stralign@h DB 01H
__8B10FA9F_winsvc@h DB 01H
__BEDBF511_mcx@h DB 01H
__D3BCC989_ime_cmodes@h DB 01H
__B1694579_imm@h DB 01H
__CFBCA79E_Windows@h DB 01H
__383FB5F5_QueryPerformanceTiming_rdtsc@h DB 01H
__A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG156745 DB	'invalid argument', 00H
	ORG $+3
$SG156746 DB	'%s', 00H
	ORG $+1
$SG156747 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.31.31103\include\xmemory', 00H
	ORG $+2
$SG156749 DB	00H, 00H
	ORG $+2
$SG156748 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '1', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '1', 00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG156750 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG149311 DB	' measures)', 00H
	ORG $+1
$SG156786 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.31.31103\include\xlocale', 00H
	ORG $+2
$SG149312 DB	'   (in ', 00H
$SG149326 DB	' measures)', 00H
	ORG $+1
$SG149327 DB	'   (in ', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?ReadCycles@QPTimer@@AAEXPA_K@Z			; QPTimer::ReadCycles
PUBLIC	?PrintCycles@QPTimer@@AAEXPBDN@Z		; QPTimer::PrintCycles
PUBLIC	?PrintCyclesByIteration@QPTimer@@AAEXPBDNH@Z	; QPTimer::PrintCyclesByIteration
PUBLIC	?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z		; QPTimer::PrintTimeSeconds
PUBLIC	?RestCycles@QPTimer@@AAEXPA_K_K1@Z		; QPTimer::RestCycles
PUBLIC	?AddCycles@QPTimer@@AAEXPA_K_K1@Z		; QPTimer::AddCycles
PUBLIC	??0QPTimer@@QAE@XZ				; QPTimer::QPTimer
PUBLIC	?NumberOfMeasures@QPTimer@@QAEHXZ		; QPTimer::NumberOfMeasures
PUBLIC	?Start@QPTimer@@QAEXXZ				; QPTimer::Start
PUBLIC	?Stop@QPTimer@@QAEXXZ				; QPTimer::Stop
PUBLIC	?Calibrate@QPTimer@@QAEXXZ			; QPTimer::Calibrate
PUBLIC	?Reset@QPTimer@@QAEXXZ				; QPTimer::Reset
PUBLIC	?ResetAll@QPTimer@@QAEXXZ			; QPTimer::ResetAll
PUBLIC	?PrintTime@QPTimer@@QAEXPBD@Z			; QPTimer::PrintTime
PUBLIC	?PrintCycles@QPTimer@@QAEXPBD@Z			; QPTimer::PrintCycles
PUBLIC	?PrintMeanTime@QPTimer@@QAEXPBD@Z		; QPTimer::PrintMeanTime
PUBLIC	?PrintMeanCycles@QPTimer@@QAEXPBD@Z		; QPTimer::PrintMeanCycles
PUBLIC	?PrintMinimumTime@QPTimer@@QAEXPBD@Z		; QPTimer::PrintMinimumTime
PUBLIC	?PrintMinimumCycles@QPTimer@@QAEXPBD@Z		; QPTimer::PrintMinimumCycles
PUBLIC	?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	__JustMyCode_Default
PUBLIC	__real@41e4dc9380000000
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@O@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ultod3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@41e4dc9380000000
CONST	SEGMENT
__real@41e4dc9380000000 DQ 041e4dc9380000000r	; 2.8e+09
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	019H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$11
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Zero_uncaught_exceptions$ = -14			; size = 1
tv72 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00032	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00037	0f b6 c0	 movzx	 eax, al
  0003a	85 c0		 test	 eax, eax
  0003c	75 06		 jne	 SHORT $LN4@sentry
  0003e	c6 45 f3 01	 mov	 BYTE PTR tv72[ebp], 1
  00042	eb 04		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00044	c6 45 f3 00	 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00048	8a 4d f3	 mov	 cl, BYTE PTR tv72[ebp]
  0004b	88 4d f2	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  0004e	0f b6 55 f2	 movzx	 edx, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00052	85 d2		 test	 edx, edx
  00054	74 0b		 je	 SHORT $LN1@sentry

; 118  :                 this->_Myostr._Osfx();

  00056	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN1@sentry:

; 119  :             }
; 120  :         }

  00061	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
  00078	cc		 int	 3
  00079	cc		 int	 3
  0007a	cc		 int	 3
  0007b	cc		 int	 3
  0007c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv160 = -28						; size = 4
__Tied$ = -24						; size = 4
__Rdbuf$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00038	89 08		 mov	 DWORD PTR [eax], ecx

; 71   :             const auto _Rdbuf = _Myostr.rdbuf();

  0003a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 02		 mov	 eax, DWORD PTR [edx]
  0003f	89 45 e4	 mov	 DWORD PTR tv160[ebp], eax
  00042	8b 4d e4	 mov	 ecx, DWORD PTR tv160[ebp]
  00045	8b 11		 mov	 edx, DWORD PTR [ecx]
  00047	8b 4d e4	 mov	 ecx, DWORD PTR tv160[ebp]
  0004a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00053	89 45 ec	 mov	 DWORD PTR __Rdbuf$2[ebp], eax

; 72   :             if (_Rdbuf) {

  00056	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$2[ebp], 0
  0005a	74 0d		 je	 SHORT $LN7@sentry

; 73   :                 _Rdbuf->_Lock();

  0005c	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$2[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$2[ebp]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	ff d0		 call	 eax
$LN7@sentry:

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 92   :             if (!_Ostr.good()) {

  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00073	8b 11		 mov	 edx, DWORD PTR [ecx]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00078	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00081	0f b6 c0	 movzx	 eax, al
  00084	85 c0		 test	 eax, eax
  00086	75 09		 jne	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  00088	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 94   :                 return;

  0008f	eb 4d		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 95   :             }
; 96   : 
; 97   :             const auto _Tied = _Ostr.tie();

  00091	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00099	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000a2	89 45 e8	 mov	 DWORD PTR __Tied$[ebp], eax

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  000a5	83 7d e8 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000a9	74 08		 je	 SHORT $LN4@sentry
  000ab	8b 4d e8	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000ae	3b 4d 08	 cmp	 ecx, DWORD PTR __Ostr$[ebp]
  000b1	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  000b3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b6	c6 42 04 01	 mov	 BYTE PTR [edx+4], 1

; 100  :                 return;

  000ba	eb 22		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  000bc	8b 4d e8	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000c5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ca	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cd	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000d0	8b ca		 mov	 ecx, edx
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 105  :         }

  000de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f2	59		 pop	 ecx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv72 = -20						; size = 4
__Rdbuf$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 4d ec	 mov	 DWORD PTR tv72[ebp], ecx
  0003a	8b 55 ec	 mov	 edx, DWORD PTR tv72[ebp]
  0003d	8b 02		 mov	 eax, DWORD PTR [edx]
  0003f	8b 4d ec	 mov	 ecx, DWORD PTR tv72[ebp]
  00042	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004b	89 45 f0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 79   :             if (_Rdbuf) {

  0004e	83 7d f0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00052	74 0d		 je	 SHORT $LN3@Sentry_bas

; 80   :                 _Rdbuf->_Unlock();

  00054	8b 4d f0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	8b 4d f0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  0005c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005f	ff d0		 call	 eax
$LN3@Sentry_bas:

; 81   :             }
; 82   :         }

  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
  00070	cc		 int	 3
  00071	cc		 int	 3
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1001 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1002 :     _Ostr.put(_Ostr.widen('\n'));

  0000d	6a 0a		 push	 10			; 0000000aH
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00017	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0001a	8b ca		 mov	 ecx, edx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00022	0f b6 c0	 movzx	 eax, al
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z

; 1003 :     _Ostr.flush();

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 1004 :     return _Ostr;

  00038	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1005 : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -140						; size = 8
tv322 = -132						; size = 8
tv397 = -124						; size = 8
tv385 = -116						; size = 8
$T2 = -108						; size = 4
$T3 = -104						; size = 4
$T4 = -100						; size = 4
tv325 = -96						; size = 4
tv324 = -92						; size = 4
tv321 = -88						; size = 4
$T5 = -84						; size = 4
$T6 = -80						; size = 4
tv320 = -76						; size = 4
tv307 = -72						; size = 4
tv137 = -68						; size = 4
$T7 = -64						; size = 4
tv135 = -60						; size = 8
tv186 = -52						; size = 4
tv140 = -48						; size = 4
__Count$ = -44						; size = 8
__Pad$ = -36						; size = 8
$T8 = -25						; size = 1
tv323 = -24						; size = 1
$T9 = -23						; size = 1
tv334 = -22						; size = 1
$T10 = -21						; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 757  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00031	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 758  :     // insert NTBS into char stream
; 759  :     using _Elem = char;
; 760  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 761  : 
; 762  :     ios_base::iostate _State = ios_base::goodbit;

  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring

; 396  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0003d	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _strlen
  00046	83 c4 04	 add	 esp, 4
  00049	89 45 c0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 763  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  0004c	8b 4d c0	 mov	 ecx, DWORD PTR $T7[ebp]
  0004f	33 d2		 xor	 edx, edx
  00051	89 4d d4	 mov	 DWORD PTR __Count$[ebp], ecx
  00054	89 55 d8	 mov	 DWORD PTR __Count$[ebp+4], edx

; 764  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0006a	89 45 8c	 mov	 DWORD PTR tv385[ebp], eax
  0006d	89 55 90	 mov	 DWORD PTR tv385[ebp+4], edx
  00070	83 7d 90 00	 cmp	 DWORD PTR tv385[ebp+4], 0
  00074	7c 52		 jl	 SHORT $LN17@operator
  00076	7f 06		 jg	 SHORT $LN64@operator
  00078	83 7d 8c 00	 cmp	 DWORD PTR tv385[ebp], 0
  0007c	76 4a		 jbe	 SHORT $LN17@operator
$LN64@operator:
  0007e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00086	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00089	8b ca		 mov	 ecx, edx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00091	89 45 84	 mov	 DWORD PTR tv397[ebp], eax
  00094	89 55 88	 mov	 DWORD PTR tv397[ebp+4], edx
  00097	8b 45 88	 mov	 eax, DWORD PTR tv397[ebp+4]
  0009a	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  0009d	7c 29		 jl	 SHORT $LN17@operator
  0009f	7f 08		 jg	 SHORT $LN65@operator
  000a1	8b 4d 84	 mov	 ecx, DWORD PTR tv397[ebp]
  000a4	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000a7	76 1f		 jbe	 SHORT $LN17@operator
$LN65@operator:
  000a9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ac	8b 02		 mov	 eax, DWORD PTR [edx]
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000b1	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000bd	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000c0	89 45 c4	 mov	 DWORD PTR tv135[ebp], eax
  000c3	89 55 c8	 mov	 DWORD PTR tv135[ebp+4], edx
  000c6	eb 09		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000c8	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  000cc	c5 f9 13 45 c4	 vmovlpd QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  000d1	8b 4d c4	 mov	 ecx, DWORD PTR tv135[ebp]
  000d4	8b 55 c8	 mov	 edx, DWORD PTR tv135[ebp+4]
  000d7	89 4d dc	 mov	 DWORD PTR __Pad$[ebp], ecx
  000da	89 55 e0	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 765  :     const typename _Myos::sentry _Ok(_Ostr);

  000dd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e0	50		 push	 eax
  000e1	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e7	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 124  :             return _Ok;

  000f3	8a 8d 78 ff ff
	ff		 mov	 cl, BYTE PTR __Ok$[ebp+4]
  000f9	88 4d eb	 mov	 BYTE PTR $T10[ebp], cl

; 766  : 
; 767  :     if (!_Ok) {

  000fc	0f b6 55 eb	 movzx	 edx, BYTE PTR $T10[ebp]
  00100	85 d2		 test	 edx, edx
  00102	75 0e		 jne	 SHORT $LN8@operator

; 768  :         _State |= ios_base::badbit;

  00104	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00107	83 c8 04	 or	 eax, 4
  0010a	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 769  :     } else { // state okay, insert

  0010d	e9 1b 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 770  :         _TRY_IO_BEGIN

  00112	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 771  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00116	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00119	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0011e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00127	89 45 bc	 mov	 DWORD PTR tv137[ebp], eax
  0012a	8b 45 bc	 mov	 eax, DWORD PTR tv137[ebp]
  0012d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00132	83 f8 40	 cmp	 eax, 64			; 00000040H
  00135	0f 84 aa 00 00
	00		 je	 $LN11@operator

; 772  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0013b	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0013d	8b 4d dc	 mov	 ecx, DWORD PTR __Pad$[ebp]
  00140	83 e9 01	 sub	 ecx, 1
  00143	8b 55 e0	 mov	 edx, DWORD PTR __Pad$[ebp+4]
  00146	83 da 00	 sbb	 edx, 0
  00149	89 4d dc	 mov	 DWORD PTR __Pad$[ebp], ecx
  0014c	89 55 e0	 mov	 DWORD PTR __Pad$[ebp+4], edx
$LN4@operator:
  0014f	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00153	0f 8c 8c 00 00
	00		 jl	 $LN11@operator
  00159	7f 0a		 jg	 SHORT $LN66@operator
  0015b	83 7d dc 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0015f	0f 86 80 00 00
	00		 jbe	 $LN11@operator
$LN66@operator:

; 773  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00165	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00170	8b ca		 mov	 ecx, edx
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00178	88 45 ea	 mov	 BYTE PTR tv334[ebp], al
  0017b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0017e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00180	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00183	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00186	8b ca		 mov	 ecx, edx
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0018e	89 45 b8	 mov	 DWORD PTR tv307[ebp], eax
  00191	0f b6 45 ea	 movzx	 eax, BYTE PTR tv334[ebp]
  00195	50		 push	 eax
  00196	8b 4d b8	 mov	 ecx, DWORD PTR tv307[ebp]
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0019f	89 45 b4	 mov	 DWORD PTR tv320[ebp], eax
  001a2	8b 4d b4	 mov	 ecx, DWORD PTR tv320[ebp]
  001a5	89 4d ac	 mov	 DWORD PTR $T5[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring

; 462  :         return static_cast<int_type>(EOF);

  001a8	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR $T6[ebp], -1

; 454  :         return _Left == _Right;

  001af	8b 55 b0	 mov	 edx, DWORD PTR $T6[ebp]
  001b2	3b 55 ac	 cmp	 edx, DWORD PTR $T5[ebp]
  001b5	75 09		 jne	 SHORT $LN43@operator
  001b7	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv140[ebp], 1
  001be	eb 07		 jmp	 SHORT $LN44@operator
$LN43@operator:
  001c0	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN44@operator:
  001c7	8a 45 d0	 mov	 al, BYTE PTR tv140[ebp]
  001ca	88 45 e9	 mov	 BYTE PTR $T9[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 773  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001cd	0f b6 4d e9	 movzx	 ecx, BYTE PTR $T9[ebp]
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 0b		 je	 SHORT $LN12@operator

; 774  :                     _State |= ios_base::badbit; // insertion failed, quit

  001d5	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  001d8	83 ca 04	 or	 edx, 4
  001db	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 775  :                     break;

  001de	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 776  :                 }
; 777  :             }

  001e0	e9 58 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 778  :         }
; 779  : 
; 780  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  001e5	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  001e9	75 50		 jne	 SHORT $LN13@operator
  001eb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001f3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f6	8b ca		 mov	 ecx, edx
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fe	89 45 a8	 mov	 DWORD PTR tv321[ebp], eax
  00201	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00204	50		 push	 eax
  00205	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00208	51		 push	 ecx
  00209	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0020c	52		 push	 edx
  0020d	8b 4d a8	 mov	 ecx, DWORD PTR tv321[ebp]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00216	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv322[ebp], eax
  0021c	89 55 80	 mov	 DWORD PTR tv322[ebp+4], edx
  0021f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv322[ebp]
  00225	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  00228	75 08		 jne	 SHORT $LN67@operator
  0022a	8b 4d 80	 mov	 ecx, DWORD PTR tv322[ebp+4]
  0022d	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  00230	74 09		 je	 SHORT $LN13@operator
$LN67@operator:

; 781  :             _State |= ios_base::badbit;

  00232	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00235	83 ca 04	 or	 edx, 4
  00238	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx
$LN13@operator:

; 782  :         }
; 783  : 
; 784  :         if (_State == ios_base::goodbit) {

  0023b	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  0023f	0f 85 a2 00 00
	00		 jne	 $LN14@operator

; 785  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00245	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00247	8b 45 dc	 mov	 eax, DWORD PTR __Pad$[ebp]
  0024a	83 e8 01	 sub	 eax, 1
  0024d	8b 4d e0	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  00250	83 d9 00	 sbb	 ecx, 0
  00253	89 45 dc	 mov	 DWORD PTR __Pad$[ebp], eax
  00256	89 4d e0	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00259	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  0025d	0f 8c 84 00 00
	00		 jl	 $LN14@operator
  00263	7f 06		 jg	 SHORT $LN68@operator
  00265	83 7d dc 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00269	76 7c		 jbe	 SHORT $LN14@operator
$LN68@operator:

; 786  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0026b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0026e	8b 02		 mov	 eax, DWORD PTR [edx]
  00270	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00273	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00276	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0027c	88 45 e8	 mov	 BYTE PTR tv323[ebp], al
  0027f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00282	8b 11		 mov	 edx, DWORD PTR [ecx]
  00284	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00287	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0028a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00290	89 45 a4	 mov	 DWORD PTR tv324[ebp], eax
  00293	0f b6 45 e8	 movzx	 eax, BYTE PTR tv323[ebp]
  00297	50		 push	 eax
  00298	8b 4d a4	 mov	 ecx, DWORD PTR tv324[ebp]
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  002a1	89 45 a0	 mov	 DWORD PTR tv325[ebp], eax
  002a4	8b 4d a0	 mov	 ecx, DWORD PTR tv325[ebp]
  002a7	89 4d 98	 mov	 DWORD PTR $T3[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring

; 462  :         return static_cast<int_type>(EOF);

  002aa	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR $T4[ebp], -1

; 454  :         return _Left == _Right;

  002b1	8b 55 9c	 mov	 edx, DWORD PTR $T4[ebp]
  002b4	3b 55 98	 cmp	 edx, DWORD PTR $T3[ebp]
  002b7	75 09		 jne	 SHORT $LN51@operator
  002b9	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR tv186[ebp], 1
  002c0	eb 07		 jmp	 SHORT $LN52@operator
$LN51@operator:
  002c2	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv186[ebp], 0
$LN52@operator:
  002c9	8a 45 cc	 mov	 al, BYTE PTR tv186[ebp]
  002cc	88 45 e7	 mov	 BYTE PTR $T8[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 786  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002cf	0f b6 4d e7	 movzx	 ecx, BYTE PTR $T8[ebp]
  002d3	85 c9		 test	 ecx, ecx
  002d5	74 0b		 je	 SHORT $LN15@operator

; 787  :                     _State |= ios_base::badbit; // insertion failed, quit

  002d7	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  002da	83 ca 04	 or	 edx, 4
  002dd	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 788  :                     break;

  002e0	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 789  :                 }
; 790  :             }

  002e2	e9 60 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 791  :         }
; 792  : 
; 793  :         _Ostr.width(0);

  002e7	6a 00		 push	 0
  002e9	6a 00		 push	 0
  002eb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002f3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002f6	8b ca		 mov	 ecx, edx
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  002fe	eb 1d		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 794  :         _CATCH_IO_(ios_base, _Ostr)

  00300	6a 01		 push	 1
  00302	6a 04		 push	 4
  00304	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00307	8b 08		 mov	 ecx, DWORD PTR [eax]
  00309	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0030c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0030f	8b ca		 mov	 ecx, edx
  00311	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00317	b8 00 00 00 00	 mov	 eax, $LN23@operator
  0031c	c3		 ret	 0
$LN19@operator:
  0031d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00324	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
  00326	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 795  :     }
; 796  : 
; 797  :     _Ostr.setstate(_State);

  0032d	6a 00		 push	 0
  0032f	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00332	50		 push	 eax
  00333	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00336	8b 11		 mov	 edx, DWORD PTR [ecx]
  00338	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0033b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 798  :     return _Ostr;

  00344	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00347	89 45 94	 mov	 DWORD PTR $T2[ebp], eax
  0034a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00351	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR __Ok$[ebp]
  00357	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0035c	8b 45 94	 mov	 eax, DWORD PTR $T2[ebp]

; 799  : }

  0035f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00362	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00369	59		 pop	 ecx
  0036a	5f		 pop	 edi
  0036b	5e		 pop	 esi
  0036c	5b		 pop	 ebx
  0036d	8b e5		 mov	 esp, ebp
  0036f	5d		 pop	 ebp
  00370	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR __Ok$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
_num$ = 12						; size = 4
?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z PROC	; QPTimer::PrintMinimumCyclesByIteration
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 141  : 	if(!DisableOutput)

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b6 48 38	 movzx	 ecx, BYTE PTR [eax+56]
  00018	85 c9		 test	 ecx, ecx
  0001a	75 26		 jne	 SHORT $LN2@PrintMinim

; 142  : 		PrintCyclesByIteration(message,(double)minimumTime,num);

  0001c	8b 55 0c	 mov	 edx, DWORD PTR _num$[ebp]
  0001f	52		 push	 edx
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00026	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00029	e8 00 00 00 00	 call	 __ultod3
  0002e	83 ec 08	 sub	 esp, 8
  00031	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  00039	51		 push	 ecx
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?PrintCyclesByIteration@QPTimer@@AAEXPBDNH@Z ; QPTimer::PrintCyclesByIteration
$LN2@PrintMinim:

; 143  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ENDP	; QPTimer::PrintMinimumCyclesByIteration
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
?PrintMinimumCycles@QPTimer@@QAEXPBD@Z PROC		; QPTimer::PrintMinimumCycles
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 134  : 	if(!DisableOutput)

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b6 48 38	 movzx	 ecx, BYTE PTR [eax+56]
  00018	85 c9		 test	 ecx, ecx
  0001a	75 22		 jne	 SHORT $LN2@PrintMinim

; 135  : 		PrintCycles(message,(double)minimumTime);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00022	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00025	e8 00 00 00 00	 call	 __ultod3
  0002a	83 ec 08	 sub	 esp, 8
  0002d	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  00032	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?PrintCycles@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintCycles
$LN2@PrintMinim:

; 136  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?PrintMinimumCycles@QPTimer@@QAEXPBD@Z ENDP		; QPTimer::PrintMinimumCycles
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
?PrintMinimumTime@QPTimer@@QAEXPBD@Z PROC		; QPTimer::PrintMinimumTime
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 127  : 	if(!DisableOutput)

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b6 48 38	 movzx	 ecx, BYTE PTR [eax+56]
  00018	85 c9		 test	 ecx, ecx
  0001a	75 22		 jne	 SHORT $LN2@PrintMinim

; 128  : 		PrintTimeSeconds(message,(double)minimumTime);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00022	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00025	e8 00 00 00 00	 call	 __ultod3
  0002a	83 ec 08	 sub	 esp, 8
  0002d	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  00032	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintTimeSeconds
$LN2@PrintMinim:

; 129  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?PrintMinimumTime@QPTimer@@QAEXPBD@Z ENDP		; QPTimer::PrintMinimumTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_MeanCycles$1 = -12					; size = 8
_this$ = -4						; size = 4
_message$ = 8						; size = 4
?PrintMeanCycles@QPTimer@@QAEXPBD@Z PROC		; QPTimer::PrintMeanCycles
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 161  : 	if(!DisableOutput)

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	0f b6 48 38	 movzx	 ecx, BYTE PTR [eax+56]
  0001a	85 c9		 test	 ecx, ecx
  0001c	75 76		 jne	 SHORT $LN2@PrintMeanC

; 162  : 	{
; 163  : 		double MeanCycles ;
; 164  : 		MeanCycles = ((double)totalTime/times);

  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00024	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00027	e8 00 00 00 00	 call	 __ultod3
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c5 f3 2a 48 28	 vcvtsi2sd xmm1, xmm1, DWORD PTR [eax+40]
  00034	c5 fb 5e c1	 vdivsd	 xmm0, xmm0, xmm1
  00038	c5 fb 11 45 f4	 vmovsd	 QWORD PTR _MeanCycles$1[ebp], xmm0

; 165  : 
; 166  : 		PrintCycles(message,MeanCycles );

  0003d	83 ec 08	 sub	 esp, 8
  00040	c5 fb 10 45 f4	 vmovsd	 xmm0, QWORD PTR _MeanCycles$1[ebp]
  00045	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0004d	51		 push	 ecx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?PrintCycles@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintCycles

; 167  : 		cout << "   (in " << times << " measures)" <<endl;

  00056	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0005b	68 00 00 00 00	 push	 OFFSET $SG149326
  00060	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00063	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET $SG149327
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00078	83 c4 08	 add	 esp, 8
  0007b	8b c8		 mov	 ecx, eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00089	83 c4 08	 add	 esp, 8
  0008c	8b c8		 mov	 ecx, eax
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
$LN2@PrintMeanC:

; 168  : 	}
; 169  : }

  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?PrintMeanCycles@QPTimer@@QAEXPBD@Z ENDP		; QPTimer::PrintMeanCycles
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_MeanTime$1 = -12					; size = 8
_this$ = -4						; size = 4
_message$ = 8						; size = 4
?PrintMeanTime@QPTimer@@QAEXPBD@Z PROC			; QPTimer::PrintMeanTime
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 148  : 	if(!DisableOutput)

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	0f b6 48 38	 movzx	 ecx, BYTE PTR [eax+56]
  0001a	85 c9		 test	 ecx, ecx
  0001c	75 76		 jne	 SHORT $LN2@PrintMeanT

; 149  : 	{
; 150  : 		double MeanTime ;
; 151  : 		MeanTime = ((double)totalTime/times);

  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00024	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00027	e8 00 00 00 00	 call	 __ultod3
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c5 f3 2a 48 28	 vcvtsi2sd xmm1, xmm1, DWORD PTR [eax+40]
  00034	c5 fb 5e c1	 vdivsd	 xmm0, xmm0, xmm1
  00038	c5 fb 11 45 f4	 vmovsd	 QWORD PTR _MeanTime$1[ebp], xmm0

; 152  : 
; 153  : 		PrintTimeSeconds(message,MeanTime);

  0003d	83 ec 08	 sub	 esp, 8
  00040	c5 fb 10 45 f4	 vmovsd	 xmm0, QWORD PTR _MeanTime$1[ebp]
  00045	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0004d	51		 push	 ecx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintTimeSeconds

; 154  : 		cout << "   (in " << times << " measures)" <<endl;

  00056	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0005b	68 00 00 00 00	 push	 OFFSET $SG149311
  00060	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00063	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET $SG149312
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00078	83 c4 08	 add	 esp, 8
  0007b	8b c8		 mov	 ecx, eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00089	83 c4 08	 add	 esp, 8
  0008c	8b c8		 mov	 ecx, eax
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
$LN2@PrintMeanT:

; 155  : 	}
; 156  : }

  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?PrintMeanTime@QPTimer@@QAEXPBD@Z ENDP			; QPTimer::PrintMeanTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
?PrintCycles@QPTimer@@QAEXPBD@Z PROC			; QPTimer::PrintCycles
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 120  : 	if(!DisableOutput)

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b6 48 38	 movzx	 ecx, BYTE PTR [eax+56]
  00018	85 c9		 test	 ecx, ecx
  0001a	75 22		 jne	 SHORT $LN2@PrintCycle

; 121  : 		PrintCycles(message,(double)result);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00022	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00025	e8 00 00 00 00	 call	 __ultod3
  0002a	83 ec 08	 sub	 esp, 8
  0002d	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  00032	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?PrintCycles@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintCycles
$LN2@PrintCycle:

; 122  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?PrintCycles@QPTimer@@QAEXPBD@Z ENDP			; QPTimer::PrintCycles
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
?PrintTime@QPTimer@@QAEXPBD@Z PROC			; QPTimer::PrintTime
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 113  : 	if(!DisableOutput)

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b6 48 38	 movzx	 ecx, BYTE PTR [eax+56]
  00018	85 c9		 test	 ecx, ecx
  0001a	75 22		 jne	 SHORT $LN2@PrintTime

; 114  : 		PrintTimeSeconds(message,(double)result);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00022	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00025	e8 00 00 00 00	 call	 __ultod3
  0002a	83 ec 08	 sub	 esp, 8
  0002d	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  00032	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintTimeSeconds
$LN2@PrintTime:

; 115  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?PrintTime@QPTimer@@QAEXPBD@Z ENDP			; QPTimer::PrintTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetAll@QPTimer@@QAEXXZ PROC				; QPTimer::ResetAll
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 102  : 	//startTime=0.0;
; 103  : 	result=0;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	33 c9		 xor	 ecx, ecx
  00016	33 d2		 xor	 edx, edx
  00018	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 104  : 	minimumTime= MAX_64BIT_VALUE;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c9 ff	 or	 ecx, -1
  00024	c7 40 18 ff ff
	ff ff		 mov	 DWORD PTR [eax+24], -1
  0002b	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 105  : 	totalTime=0;

  0002e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00031	33 c0		 xor	 eax, eax
  00033	33 c9		 xor	 ecx, ecx
  00035	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00038	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 106  : 
; 107  : 	times=0;

  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 108  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?ResetAll@QPTimer@@QAEXXZ ENDP				; QPTimer::ResetAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@QPTimer@@QAEXXZ PROC				; QPTimer::Reset
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 95   : 	//startTime=0.0;
; 96   : 	result=0;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	33 c9		 xor	 ecx, ecx
  00016	33 d2		 xor	 edx, edx
  00018	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 97   : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?Reset@QPTimer@@QAEXXZ ENDP				; QPTimer::Reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_now$1 = -32						; size = 8
_r$2 = -24						; size = 8
_test_times$ = -16					; size = 4
tv134 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
?Calibrate@QPTimer@@QAEXXZ PROC				; QPTimer::Calibrate
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 72   : 	int test_times=50;

  00013	c7 45 f0 32 00
	00 00		 mov	 DWORD PTR _test_times$[ebp], 50 ; 00000032H

; 73   : 	overhead= MAX_64BIT_VALUE;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c9 ff	 or	 ecx, -1
  00020	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1
  00027	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 74   : 
; 75   : 	for (int i=0; i<test_times; i++)

  0002a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00031	eb 09		 jmp	 SHORT $LN4@Calibrate
$LN2@Calibrate:
  00033	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  00036	83 c2 01	 add	 edx, 1
  00039	89 55 f8	 mov	 DWORD PTR _i$3[ebp], edx
$LN4@Calibrate:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0003f	3b 45 f0	 cmp	 eax, DWORD PTR _test_times$[ebp]
  00042	7d 65		 jge	 SHORT $LN3@Calibrate

; 76   : 	{
; 77   : 		DWORD64 r;
; 78   : 		DWORD64 now;
; 79   : 
; 80   : 		ReadCycles(&startTime);

  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	51		 push	 ecx
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?ReadCycles@QPTimer@@AAEXPA_K@Z ; QPTimer::ReadCycles

; 81   : 		ReadCycles(&now);

  00050	8d 55 e0	 lea	 edx, DWORD PTR _now$1[ebp]
  00053	52		 push	 edx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?ReadCycles@QPTimer@@AAEXPA_K@Z ; QPTimer::ReadCycles

; 82   : 
; 83   : 		RestCycles(&r,now,startTime);

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	51		 push	 ecx
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	52		 push	 edx
  00066	8b 45 e4	 mov	 eax, DWORD PTR _now$1[ebp+4]
  00069	50		 push	 eax
  0006a	8b 4d e0	 mov	 ecx, DWORD PTR _now$1[ebp]
  0006d	51		 push	 ecx
  0006e	8d 55 e8	 lea	 edx, DWORD PTR _r$2[ebp]
  00071	52		 push	 edx
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?RestCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::RestCycles

; 84   : 		
; 85   : 		if (overhead > r)

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	89 45 f4	 mov	 DWORD PTR tv134[ebp], eax
  00080	8b 4d f4	 mov	 ecx, DWORD PTR tv134[ebp]
  00083	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00086	3b 55 ec	 cmp	 edx, DWORD PTR _r$2[ebp+4]
  00089	72 1c		 jb	 SHORT $LN5@Calibrate
  0008b	77 0b		 ja	 SHORT $LN7@Calibrate
  0008d	8b 45 f4	 mov	 eax, DWORD PTR tv134[ebp]
  00090	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00093	3b 4d e8	 cmp	 ecx, DWORD PTR _r$2[ebp]
  00096	76 0f		 jbe	 SHORT $LN5@Calibrate
$LN7@Calibrate:

; 86   : 			overhead = r;

  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	8b 45 e8	 mov	 eax, DWORD PTR _r$2[ebp]
  0009e	8b 4d ec	 mov	 ecx, DWORD PTR _r$2[ebp+4]
  000a1	89 42 20	 mov	 DWORD PTR [edx+32], eax
  000a4	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$LN5@Calibrate:

; 87   : 	}

  000a7	eb 8a		 jmp	 SHORT $LN2@Calibrate
$LN3@Calibrate:

; 88   : 	ResetAll();

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ?ResetAll@QPTimer@@QAEXXZ ; QPTimer::ResetAll

; 89   : }

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
?Calibrate@QPTimer@@QAEXXZ ENDP				; QPTimer::Calibrate
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_now$ = -28						; size = 8
_r$ = -20						; size = 8
tv179 = -12						; size = 4
tv178 = -8						; size = 4
_this$ = -4						; size = 4
?Stop@QPTimer@@QAEXXZ PROC				; QPTimer::Stop
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 52   : 	DWORD64 now;
; 53   : 	ReadCycles(&now);

  00013	8d 45 e4	 lea	 eax, DWORD PTR _now$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?ReadCycles@QPTimer@@AAEXPA_K@Z ; QPTimer::ReadCycles

; 54   : 
; 55   : 	DWORD64 r;
; 56   : 	RestCycles(&r,now,startTime);

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	52		 push	 edx
  00026	8b 01		 mov	 eax, DWORD PTR [ecx]
  00028	50		 push	 eax
  00029	8b 4d e8	 mov	 ecx, DWORD PTR _now$[ebp+4]
  0002c	51		 push	 ecx
  0002d	8b 55 e4	 mov	 edx, DWORD PTR _now$[ebp]
  00030	52		 push	 edx
  00031	8d 45 ec	 lea	 eax, DWORD PTR _r$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?RestCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::RestCycles

; 57   : 	RestCycles(&r,r,overhead);

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00043	52		 push	 edx
  00044	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00047	50		 push	 eax
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp+4]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _r$[ebp]
  0004f	52		 push	 edx
  00050	8d 45 ec	 lea	 eax, DWORD PTR _r$[ebp]
  00053	50		 push	 eax
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?RestCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::RestCycles

; 58   : 
; 59   : 	AddCycles(&result,result,r);

  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp+4]
  0005f	51		 push	 ecx
  00060	8b 55 ec	 mov	 edx, DWORD PTR _r$[ebp]
  00063	52		 push	 edx
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006a	51		 push	 ecx
  0006b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0006e	52		 push	 edx
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 c0 08	 add	 eax, 8
  00075	50		 push	 eax
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?AddCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::AddCycles

; 60   : 
; 61   : 	AddCycles(&totalTime,totalTime,r);

  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp+4]
  00081	51		 push	 ecx
  00082	8b 55 ec	 mov	 edx, DWORD PTR _r$[ebp]
  00085	52		 push	 edx
  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0008c	51		 push	 ecx
  0008d	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00090	52		 push	 edx
  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	83 c0 10	 add	 eax, 16			; 00000010H
  00097	50		 push	 eax
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ?AddCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::AddCycles

; 62   : 
; 63   : 	if (minimumTime > result)

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	89 4d f8	 mov	 DWORD PTR tv178[ebp], ecx
  000a9	89 55 f4	 mov	 DWORD PTR tv179[ebp], edx
  000ac	8b 45 f8	 mov	 eax, DWORD PTR tv178[ebp]
  000af	8b 4d f4	 mov	 ecx, DWORD PTR tv179[ebp]
  000b2	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  000b5	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  000b8	72 22		 jb	 SHORT $LN2@Stop
  000ba	77 0e		 ja	 SHORT $LN4@Stop
  000bc	8b 45 f8	 mov	 eax, DWORD PTR tv178[ebp]
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR tv179[ebp]
  000c2	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000c5	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000c8	76 12		 jbe	 SHORT $LN2@Stop
$LN4@Stop:

; 64   : 			minimumTime = result;

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000d3	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  000d6	89 50 18	 mov	 DWORD PTR [eax+24], edx
  000d9	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN2@Stop:

; 65   : 
; 66   : 	times++;

  000dc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000df	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000e2	83 c0 01	 add	 eax, 1
  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 67   : }

  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
?Stop@QPTimer@@QAEXXZ ENDP				; QPTimer::Stop
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Start@QPTimer@@QAEXXZ PROC				; QPTimer::Start
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 46   : 	ReadCycles(&startTime);

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?ReadCycles@QPTimer@@AAEXPA_K@Z ; QPTimer::ReadCycles

; 47   : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?Start@QPTimer@@QAEXXZ ENDP				; QPTimer::Start
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumberOfMeasures@QPTimer@@QAEHXZ PROC			; QPTimer::NumberOfMeasures
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 172  : 	return times;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]

; 173  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?NumberOfMeasures@QPTimer@@QAEHXZ ENDP			; QPTimer::NumberOfMeasures
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0QPTimer@@QAE@XZ PROC					; QPTimer::QPTimer
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 33   : 	minimumTime= MAX_64BIT_VALUE;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	83 c9 ff	 or	 ecx, -1
  00017	c7 40 18 ff ff
	ff ff		 mov	 DWORD PTR [eax+24], -1
  0001e	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 34   : 	times=0;

  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 35   : 	overhead= 0;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	33 c9		 xor	 ecx, ecx
  00030	33 d2		 xor	 edx, edx
  00032	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00035	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 36   : 	totalTime=0;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	33 c9		 xor	 ecx, ecx
  0003d	33 d2		 xor	 edx, edx
  0003f	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00042	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 37   : 	Reset();

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset

; 38   : 	QPFrequencyHz =  CPU_FREQ_HZ ;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	c5 fb 10 05 00
	00 00 00	 vmovsd	 xmm0, QWORD PTR __real@41e4dc9380000000
  00058	c5 fb 11 40 30	 vmovsd	 QWORD PTR [eax+48], xmm0

; 39   : 	//QPFrequencyHz = getTickFrequency();
; 40   : 	DisableOutput=false;

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	c6 41 38 00	 mov	 BYTE PTR [ecx+56], 0

; 41   : }

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
??0QPTimer@@QAE@XZ ENDP					; QPTimer::QPTimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c_add$ = 8						; size = 4
_c_final$ = 12						; size = 8
_c_init$ = 20						; size = 8
?AddCycles@QPTimer@@AAEXPA_K_K1@Z PROC			; QPTimer::AddCycles
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 227  : 	*c_add=c_final+c_init;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _c_final$[ebp]
  00014	03 45 14	 add	 eax, DWORD PTR _c_init$[ebp]
  00017	8b 4d 10	 mov	 ecx, DWORD PTR _c_final$[ebp+4]
  0001a	13 4d 18	 adc	 ecx, DWORD PTR _c_init$[ebp+4]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _c_add$[ebp]
  00020	89 02		 mov	 DWORD PTR [edx], eax
  00022	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 228  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 14 00	 ret	 20			; 00000014H
?AddCycles@QPTimer@@AAEXPA_K_K1@Z ENDP			; QPTimer::AddCycles
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c_dif$ = 8						; size = 4
_c_final$ = 12						; size = 8
_c_init$ = 20						; size = 8
?RestCycles@QPTimer@@AAEXPA_K_K1@Z PROC			; QPTimer::RestCycles
; _this$ = ecx

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 221  : 	*c_dif=c_final-c_init;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _c_final$[ebp]
  00014	2b 45 14	 sub	 eax, DWORD PTR _c_init$[ebp]
  00017	8b 4d 10	 mov	 ecx, DWORD PTR _c_final$[ebp+4]
  0001a	1b 4d 18	 sbb	 ecx, DWORD PTR _c_init$[ebp+4]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _c_dif$[ebp]
  00020	89 02		 mov	 DWORD PTR [edx], eax
  00022	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 222  : 
; 223  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 14 00	 ret	 20			; 00000014H
?RestCycles@QPTimer@@AAEXPA_K_K1@Z ENDP			; QPTimer::RestCycles
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pc$ = 8						; size = 4
_cycles$ = 12						; size = 8
?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z PROC		; QPTimer::PrintTimeSeconds
; _this$ = ecx

; 213  : {   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 214  : 	cout << pc << cycles/QPFrequencyHz << endl;

  00011	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c5 fb 10 45 0c	 vmovsd	 xmm0, QWORD PTR _cycles$[ebp]
  0001e	c5 fb 5e 40 30	 vdivsd	 xmm0, xmm0, QWORD PTR [eax+48]
  00023	83 ec 08	 sub	 esp, 8
  00026	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _pc$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b c8		 mov	 ecx, eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  00046	8b c8		 mov	 ecx, eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 215  : /*	if(pc!=NULL && strlen(pc)>0)
; 216  : 		printf("%s",pc);		*/
; 217  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z ENDP		; QPTimer::PrintTimeSeconds
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pc$ = 8						; size = 4
_cycles$ = 12						; size = 8
_NumberOfIterations$ = 20				; size = 4
?PrintCyclesByIteration@QPTimer@@AAEXPBDNH@Z PROC	; QPTimer::PrintCyclesByIteration
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 206  : 	cout << pc << cycles/(long double)NumberOfIterations << endl;

  00011	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00016	c5 fb 2a 45 14	 vcvtsi2sd xmm0, xmm0, DWORD PTR _NumberOfIterations$[ebp]
  0001b	c5 fb 10 4d 0c	 vmovsd	 xmm1, QWORD PTR _cycles$[ebp]
  00020	c5 f3 5e c0	 vdivsd	 xmm0, xmm1, xmm0
  00024	83 ec 08	 sub	 esp, 8
  00027	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  0002c	8b 45 08	 mov	 eax, DWORD PTR _pc$[ebp]
  0002f	50		 push	 eax
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0003c	83 c4 08	 add	 esp, 8
  0003f	8b c8		 mov	 ecx, eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@O@Z
  00047	8b c8		 mov	 ecx, eax
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 207  : }	

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 10 00	 ret	 16			; 00000010H
?PrintCyclesByIteration@QPTimer@@AAEXPBDNH@Z ENDP	; QPTimer::PrintCyclesByIteration
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pc$ = 8						; size = 4
_cycles$ = 12						; size = 8
?PrintCycles@QPTimer@@AAEXPBDN@Z PROC			; QPTimer::PrintCycles
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 199  : 	cout << pc << cycles << endl;

  00011	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00016	83 ec 08	 sub	 esp, 8
  00019	c5 fb 10 45 0c	 vmovsd	 xmm0, QWORD PTR _cycles$[ebp]
  0001e	c5 fb 11 04 24	 vmovsd	 QWORD PTR [esp], xmm0
  00023	8b 45 08	 mov	 eax, DWORD PTR _pc$[ebp]
  00026	50		 push	 eax
  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00033	83 c4 08	 add	 esp, 8
  00036	8b c8		 mov	 ecx, eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  0003e	8b c8		 mov	 ecx, eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 200  : }	

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
?PrintCycles@QPTimer@@AAEXPBDN@Z ENDP			; QPTimer::PrintCycles
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
_TEXT	SEGMENT
_dummy$ = -8						; size = 4
_this$ = -4						; size = 4
_cycles$ = 8						; size = 4
?ReadCycles@QPTimer@@AAEXPA_K@Z PROC			; QPTimer::ReadCycles
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 181  : 	unsigned int dummy;
; 182  : 
; 183  : 	*cycles = __rdtscp(&dummy);

  00013	0f 01 f9	 rdtscp
  00016	89 4d f8	 mov	 DWORD PTR _dummy$[ebp], ecx
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _cycles$[ebp]
  0001c	89 01		 mov	 DWORD PTR [ecx], eax
  0001e	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 184  : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?ReadCycles@QPTimer@@AAEXPA_K@Z ENDP			; QPTimer::ReadCycles
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
