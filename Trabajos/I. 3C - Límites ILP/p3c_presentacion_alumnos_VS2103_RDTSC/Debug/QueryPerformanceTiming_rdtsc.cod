; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31104.0 

	TITLE	C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\Debug\QueryPerformanceTiming_rdtsc.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F32AA0BD_concurrencysal@h DB 01H
__5A3A63C4_sal@h DB 01H
__6BEC7B3D_vadefs@h DB 01H
__1BC54112_vcruntime@h DB 01H
__6569C2CA_corecrt@h DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__FF18040F_xkeycheck@h DB 01H
__3779B844_yvals_core@h DB 01H
__AD973B64_limits@h DB 01H
__62B17962_climits DB 01H
__EDB62062_vcruntime_new@h DB 01H
__5858FF13_vcruntime_new_debug@h DB 01H
__49916C16_crtdbg@h DB 01H
__41ABBF80_crtdefs@h DB 01H
__F1399E15_use_ansi@h DB 01H
__501EED2F_yvals@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__91D68F2D_math@h DB 01H
__6C20D4D3_corecrt_malloc@h DB 01H
__C9393812_stddef@h DB 01H
__D493B9BD_corecrt_search@h DB 01H
__1473E23E_corecrt_wstdlib@h DB 01H
__B49664B7_stdlib@h DB 01H
__E65E5B90_cstdlib DB 01H
__0A37AC5C_xtr1common DB 01H
__D986D001_intrin0@inl@h DB 01H
__5886068B_intrin0@h DB 01H
__38806D73_cmath DB 01H
__A913C05D_cstdio DB 01H
__CDDAF8CA_errno@h DB 01H
__4041E9ED_vcruntime_string@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__AACCF370_cstring DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__5DB64B66_corecrt_wctype@h DB 01H
__CB8D9B53_corecrt_wdirect@h DB 01H
__A9063C41_corecrt_share@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__61BDDCD5_corecrt_wprocess@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__64F617E8_types@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__3398160E_cwchar DB 01H
__4395813D_cstddef DB 01H
__E9ECD68E_initializer_list DB 01H
__264C4909_xstddef DB 01H
__70589338_iosfwd DB 01H
__13E1155B_stdint@h DB 01H
__5B00BAED_cstdint DB 01H
__B1B1C2C4_type_traits DB 01H
__D153DE1B_utility DB 01H
__7F396DA6_xutility DB 01H
__6E95DAE6_iterator DB 01H
__5B81F060_share@h DB 01H
__4926392B___msvc_system_error_abi@hpp DB 01H
__3432B4A6_cerrno DB 01H
__20BB4341_malloc@h DB 01H
__3C5D8049_corecrt_terminate@h DB 01H
__18EF2578_eh@h DB 01H
__50B6FA41_vcruntime_exception@h DB 01H
__89F4D116_exception DB 01H
__158E8E48_float@h DB 01H
__DA570BDA_cfloat DB 01H
__93CAE39E_isa_availability@h DB 01H
__BCB146BE_limits DB 01H
__F32E7743_new DB 01H
__83F85DC0_xatomic@h DB 01H
__BBC6BDD8_xmemory DB 01H
__CF153B44_xstring DB 01H
__00BAEB4B_stdexcept DB 01H
__74E16614_xcall_once@h DB 01H
__F88BF820_xerrc@h DB 01H
__A0B61CF9_time@h DB 01H
__FE33F17B_ctime DB 01H
__C9FD8EE7_xtimec@h DB 01H
__9077A9A6_xthreads@h DB 01H
__D7841A7C_atomic DB 01H
__CBBC7434_system_error DB 01H
__A784D2C3_vcruntime_typeinfo@h DB 01H
__0FE69EBF_typeinfo DB 01H
__001F4A30_memory DB 01H
__2C5A1D3F_xfacet DB 01H
__61AD4BC5___msvc_xlocinfo_types@hpp DB 01H
__B2D2BA86_ctype@h DB 01H
__A6D827FA_cctype DB 01H
__A3D09DBA_locale@h DB 01H
__75F28741_clocale DB 01H
__106F7D77_xlocinfo DB 01H
__102B4F75_xlocale DB 01H
__298A0A64_xiosbase DB 01H
__021A53F7_streambuf DB 01H
__8EAC2962_xlocnum DB 01H
__0BE34D55_ios DB 01H
__033B95B1_ostream DB 01H
__60EBA08B_istream DB 01H
__1D4017B9_iostream DB 01H
__8382FD58_setjmp@h DB 01H
__34193596_mmintrin@h DB 01H
__9B102D46_xmmintrin@h DB 01H
__FE72A48A_emmintrin@h DB 01H
__21D3CC03_pmmintrin@h DB 01H
__910ABF81_tmmintrin@h DB 01H
__B831AA02_smmintrin@h DB 01H
__DD5323CE_nmmintrin@h DB 01H
__08E8D980_wmmintrin@h DB 01H
__C37C9487_zmmintrin@h DB 01H
__F468364D_immintrin@h DB 01H
__4EABD708_ammintrin@h DB 01H
__A08FDA25_mm3dnow@h DB 01H
__A5B4412F_intrin@h DB 01H
__D0DFFAC6_winpackagefamily@h DB 01H
__D0D0F397_winapifamily@h DB 01H
__94A3FDDD_sdkddkver@h DB 01H
__AF2AD727_excpt@h DB 01H
__273EAB94_stdarg@h DB 01H
__1C9F390F_specstrings_undef@h DB 01H
__36A21E95_specstrings_strict@h DB 01H
__452FE810_sdv_driverspecs@h DB 01H
__30F344B3_driverspecs@h DB 01H
__BD886E18_specstrings@h DB 01H
__BF9C347F_kernelspecs@h DB 01H
__79C7FC57_basetsd@h DB 01H
__D545DD43_guiddef@h DB 01H
__DF4F952E_pshpack4@h DB 01H
__7FCD0577_poppack@h DB 01H
__DBC2E99C_pshpack2@h DB 01H
__D6556C4A_pshpack8@h DB 01H
__D98457C5_pshpack1@h DB 01H
__614C4572_apiset@h DB 01H
__8500295D_ktmtypes@h DB 01H
__D5DDFBF3_winnt@h DB 01H
__156BD51A_minwindef@h DB 01H
__F9B9A8F7_windef@h DB 01H
__BD2C4590_apisetcconv@h DB 01H
__18251742_minwinbase@h DB 01H
__23611203_apiquery2@h DB 01H
__C914CD48_processenv@h DB 01H
__996311FD_fileapi@h DB 01H
__41AEF397_fileapifromapp@h DB 01H
__65579FF3_debugapi@h DB 01H
__476FCB5A_utilapiset@h DB 01H
__089D2E42_handleapi@h DB 01H
__B16F04F5_errhandlingapi@h DB 01H
__81CCB02F_fibersapi@h DB 01H
__A9B4C5F0_namedpipeapi@h DB 01H
__C209F2C8_profileapi@h DB 01H
__34C22DC8_heapapi@h DB 01H
__8A238485_ioapiset@h DB 01H
__4826BA69_synchapi@h DB 01H
__6A31599C_interlockedapi@h DB 01H
__439612F0_processthreadsapi@h DB 01H
__7BB37CFA_sysinfoapi@h DB 01H
__5733279A_memoryapi@h DB 01H
__6D078C0D_enclaveapi@h DB 01H
__3663CE50_threadpoollegacyapiset@h DB 01H
__E16717D9_threadpoolapiset@h DB 01H
__4A6035CC_jobapi@h DB 01H
__62EEB553_jobapi2@h DB 01H
__9F22E7EF_wow64apiset@h DB 01H
__E86B4A9A_libloaderapi@h DB 01H
__EB536E54_securitybaseapi@h DB 01H
__E915C287_namespaceapi@h DB 01H
__C66F44F2_systemtopologyapi@h DB 01H
__B6175B28_processtopologyapi@h DB 01H
__9E4AD838_securityappcontainer@h DB 01H
__F599FDAE_realtimeapiset@h DB 01H
__D4435474_winerror@h DB 01H
__F94F31E6_timezoneapi@h DB 01H
__B3ED30D4_winbase@h DB 01H
__E9F7D11F_wingdi@h DB 01H
__AC21C382_tvout@h DB 01H
__DB057BA3_winuser@h DB 01H
__A1BAD304_datetimeapi@h DB 01H
__30E2BD27_winnls@h DB 01H
__B7FF4B97_stringapiset@h DB 01H
__66C87297_wincontypes@h DB 01H
__1317218F_consoleapi@h DB 01H
__8D62D26D_consoleapi2@h DB 01H
__8CA0B85A_consoleapi3@h DB 01H
__CE39E65B_wincon@h DB 01H
__F6801ACC_verrsrc@h DB 01H
__1CB844D9_winver@h DB 01H
__D0CFA71C_reason@h DB 01H
__F3D58382_winreg@h DB 01H
__34C28572_wnnc@h DB 01H
__0617DE59_winnetwk@h DB 01H
__93AC9EF8_cderr@h DB 01H
__3AE29FFA_dde@h DB 01H
__48250249_ddeml@h DB 01H
__4605C6DD_dlgs@h DB 01H
__C826BBA2_lzexpand@h DB 01H
__B8DFB118_mmsyscom@h DB 01H
__EDC2A662_mciapi@h DB 01H
__87B17D5B_mmiscapi@h DB 01H
__0C4862FC_mmiscapi2@h DB 01H
__83F5D08C_playsoundapi@h DB 01H
__CA3F1D44_mmeapi@h DB 01H
__BD2270BE_timeapi@h DB 01H
__397CAA2F_joystickapi@h DB 01H
__05A21AEE_mmsystem@h DB 01H
__6E1DF0B6_nb30@h DB 01H
__75098885_rpcdcep@h DB 01H
__D8AC8DD5_rpcdce@h DB 01H
__2F1118EF_rpcnsi@h DB 01H
__0DE10DFC_rpcnterr@h DB 01H
__4497164E_rpcasync@h DB 01H
__06CA6763_rpc@h DB 01H
__C32EC2F2_shellapi@h DB 01H
__B289ECB8_winperf@h DB 01H
__07EA6B7C_inaddr@h DB 01H
__9ED0251E_winsock@h DB 01H
__FD938996_bcrypt@h DB 01H
__4E32BFB9_ncrypt@h DB 01H
__815AA9AD_dpapi@h DB 01H
__0B2E95FF_wincrypt@h DB 01H
__288F6C52_winefs@h DB 01H
__B3F2ECA2_rpcnsip@h DB 01H
__AFB43543_rpcsal@h DB 01H
__16A21838_rpcndr@h DB 01H
__5314805F_wtypesbase@h DB 01H
__6EEE3703_wtypes@h DB 01H
__A7113148_winioctl@h DB 01H
__C595A37C_winsmcrd@h DB 01H
__42C56FB7_winscard@h DB 01H
__C4703BCA_prsht@h DB 01H
__D4D77F19_winspool@h DB 01H
__B47185B4_unknwnbase@h DB 01H
__B64C33F8_objidlbase@h DB 01H
__EA871F04_cguid@h DB 01H
__C78732AB_combaseapi@h DB 01H
__744BF5DA_unknwn@h DB 01H
__66C491E7_objidl@h DB 01H
__A217658B_oaidl@h DB 01H
__8485F416_propidlbase@h DB 01H
__65805CE1_coml2api@h DB 01H
__C7AD586F_oleidl@h DB 01H
__CBE55221_servprov@h DB 01H
__5B1E268A_msxml@h DB 01H
__1B3D3678_urlmon@h DB 01H
__EC5BC72C_propidl@h DB 01H
__0DD0E8F8_objbase@h DB 01H
__6DA674A0_oleauto@h DB 01H
__F7931962_ole2@h DB 01H
__870E9EB1_commdlg@h DB 01H
__A118E6DC_stralign@h DB 01H
__8B10FA9F_winsvc@h DB 01H
__BEDBF511_mcx@h DB 01H
__D3BCC989_ime_cmodes@h DB 01H
__B1694579_imm@h DB 01H
__CFBCA79E_Windows@h DB 01H
__383FB5F5_QueryPerformanceTiming_rdtsc@h DB 01H
__A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?ReadCycles@QPTimer@@AAEXPA_K@Z			; QPTimer::ReadCycles
PUBLIC	?PrintCycles@QPTimer@@AAEXPBDN@Z		; QPTimer::PrintCycles
PUBLIC	?PrintCyclesByIteration@QPTimer@@AAEXPBDNH@Z	; QPTimer::PrintCyclesByIteration
PUBLIC	?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z		; QPTimer::PrintTimeSeconds
PUBLIC	?RestCycles@QPTimer@@AAEXPA_K_K1@Z		; QPTimer::RestCycles
PUBLIC	?AddCycles@QPTimer@@AAEXPA_K_K1@Z		; QPTimer::AddCycles
PUBLIC	??0QPTimer@@QAE@XZ				; QPTimer::QPTimer
PUBLIC	?NumberOfMeasures@QPTimer@@QAEHXZ		; QPTimer::NumberOfMeasures
PUBLIC	?Start@QPTimer@@QAEXXZ				; QPTimer::Start
PUBLIC	?Stop@QPTimer@@QAEXXZ				; QPTimer::Stop
PUBLIC	?Calibrate@QPTimer@@QAEXXZ			; QPTimer::Calibrate
PUBLIC	?Reset@QPTimer@@QAEXXZ				; QPTimer::Reset
PUBLIC	?ResetAll@QPTimer@@QAEXXZ			; QPTimer::ResetAll
PUBLIC	?PrintTime@QPTimer@@QAEXPBD@Z			; QPTimer::PrintTime
PUBLIC	?PrintCycles@QPTimer@@QAEXPBD@Z			; QPTimer::PrintCycles
PUBLIC	?PrintMeanTime@QPTimer@@QAEXPBD@Z		; QPTimer::PrintMeanTime
PUBLIC	?PrintMeanCycles@QPTimer@@QAEXPBD@Z		; QPTimer::PrintMeanCycles
PUBLIC	?PrintMinimumTime@QPTimer@@QAEXPBD@Z		; QPTimer::PrintMinimumTime
PUBLIC	?PrintMinimumCycles@QPTimer@@QAEXPBD@Z		; QPTimer::PrintMinimumCycles
PUBLIC	?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0L@CHDMIBHC@?5measures?$CJ@		; `string'
PUBLIC	??_C@_07MLOIGAKO@?5?5?5?$CIin?5@		; `string'
PUBLIC	__real@41e4dc9380000000
EXTRN	___std_terminate:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@O@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@41e4dc9380000000
CONST	SEGMENT
__real@41e4dc9380000000 DQ 041e4dc9380000000r	; 2.8e+09
CONST	ENDS
;	COMDAT ??_C@_07MLOIGAKO@?5?5?5?$CIin?5@
CONST	SEGMENT
??_C@_07MLOIGAKO@?5?5?5?$CIin?5@ DB '   (in ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CHDMIBHC@?5measures?$CJ@
CONST	SEGMENT
??_C@_0L@CHDMIBHC@?5measures?$CJ@ DB ' measures)', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$5
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002f	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00034	84 c0		 test	 al, al
  00036	75 08		 jne	 SHORT $LN2@sentry

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909
; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {
; 118  :                 this->_Myostr._Osfx();

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN2@sentry:

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004e	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 79   :             if (_Rdbuf) {

  00052	85 c9		 test	 ecx, ecx
  00054	74 05		 je	 SHORT $LN5@sentry

; 80   :                 _Rdbuf->_Unlock();

  00056	8b 01		 mov	 eax, DWORD PTR [ecx]
  00058	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:

; 119  :             }
; 120  :         }

  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
  0006b	cc		 int	 3
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00034	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]
  00037	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  00039	8b 07		 mov	 eax, DWORD PTR [edi]
  0003b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003e	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 72   :             if (_Rdbuf) {

  00042	85 c9		 test	 ecx, ecx
  00044	74 05		 je	 SHORT $LN8@sentry

; 73   :                 _Rdbuf->_Lock();

  00046	8b 01		 mov	 eax, DWORD PTR [ecx]
  00048	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@sentry:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 272  :         return _Mystate;

  0004b	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 272  :         return _Mystate;

  00054	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 291  :         return rdstate() == ios_base::goodbit;

  00057	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0

; 272  :         return _Mystate;

  0005c	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 92   :             if (!_Ostr.good()) {

  0005f	74 04		 je	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  00061	32 c0		 xor	 al, al

; 94   :                 return;

  00063	eb 22		 jmp	 SHORT $LN23@sentry
$LN2@sentry:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 69   :         return _Tiestr;

  00065	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  00068	85 c9		 test	 ecx, ecx
  0006a	74 19		 je	 SHORT $LN4@sentry
  0006c	3b cf		 cmp	 ecx, edi
  0006e	74 15		 je	 SHORT $LN4@sentry

; 100  :                 return;
; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 291  :         return rdstate() == ios_base::goodbit;

  00076	8b 07		 mov	 eax, DWORD PTR [edi]
  00078	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007b	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
  00080	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00083	eb 02		 jmp	 SHORT $LN23@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  00085	b0 01		 mov	 al, 1
$LN23@sentry:

; 105  :         }

  00087	88 46 04	 mov	 BYTE PTR [esi+4], al
  0008a	8b c6		 mov	 eax, esi
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 79   :             if (_Rdbuf) {

  0003a	85 c9		 test	 ecx, ecx
  0003c	74 05		 je	 SHORT $LN2@Sentry_bas

; 80   :                 _Rdbuf->_Unlock();

  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 81   :             }
; 82   :         }

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5e		 pop	 esi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
  00053	cc		 int	 3
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1001 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000e	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00011	6a 0a		 push	 10			; 0000000aH
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00018	03 ce		 add	 ecx, esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00020	0f b6 c8	 movzx	 ecx, al
  00023	51		 push	 ecx
  00024	8b ce		 mov	 ecx, esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0002c	8b ce		 mov	 ecx, esi
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi

; 1002 :     _Ostr.put(_Ostr.widen('\n'));
; 1003 :     _Ostr.flush();
; 1004 :     return _Ostr;
; 1005 : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -36						; size = 8
$T2 = -28						; size = 1
$T3 = -28						; size = 1
__Count$2$ = -24					; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 757  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00030	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring

; 396  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00035	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 762  :     ios_base::iostate _State = ios_base::goodbit;

  00038	33 db		 xor	 ebx, ebx
  0003a	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring

; 396  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0003d	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL76@operator:
  00040	8a 02		 mov	 al, BYTE PTR [edx]
  00042	42		 inc	 edx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL76@operator
  00047	2b d1		 sub	 edx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 359  :         return _Wide;

  00049	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring

; 396  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004c	89 55 e8	 mov	 DWORD PTR __Count$2$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 359  :         return _Wide;

  0004f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00051	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00054	8b 7c 08 24	 mov	 edi, DWORD PTR [eax+ecx+36]
  00058	8b 74 08 20	 mov	 esi, DWORD PTR [eax+ecx+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 764  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0005c	85 ff		 test	 edi, edi
  0005e	7c 16		 jl	 SHORT $LN17@operator
  00060	7f 0e		 jg	 SHORT $LN78@operator
  00062	85 f6		 test	 esi, esi
  00064	74 10		 je	 SHORT $LN17@operator
  00066	85 ff		 test	 edi, edi
  00068	7c 0c		 jl	 SHORT $LN17@operator
  0006a	7f 04		 jg	 SHORT $LN78@operator
  0006c	3b f2		 cmp	 esi, edx
  0006e	76 06		 jbe	 SHORT $LN17@operator
$LN78@operator:
  00070	2b f2		 sub	 esi, edx
  00072	1b fb		 sbb	 edi, ebx
  00074	eb 04		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00076	33 f6		 xor	 esi, esi
  00078	33 ff		 xor	 edi, edi
$LN18@operator:

; 765  :     const typename _Myos::sentry _Ok(_Ostr);

  0007a	51		 push	 ecx
  0007b	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0007e	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 766  : 
; 767  :     if (!_Ok) {

  00083	80 7d e0 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00087	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008e	75 0a		 jne	 SHORT $LN8@operator

; 768  :         _State |= ios_base::badbit;

  00090	bb 04 00 00 00	 mov	 ebx, 4

; 769  :     } else { // state okay, insert

  00095	e9 ef 00 00 00	 jmp	 $LN88@operator
$LN8@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 322  :         return _Fmtfl;

  0009a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 770  :         _TRY_IO_BEGIN

  0009d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 322  :         return _Fmtfl;

  000a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a6	8b 44 08 14	 mov	 eax, DWORD PTR [eax+ecx+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 771  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000aa	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000af	83 f8 40	 cmp	 eax, 64			; 00000040H
  000b2	74 36		 je	 SHORT $LN73@operator
$LL4@operator:

; 772  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000b4	85 ff		 test	 edi, edi
  000b6	7c 32		 jl	 SHORT $LN73@operator
  000b8	7f 04		 jg	 SHORT $LN79@operator
  000ba	85 f6		 test	 esi, esi
  000bc	74 2c		 je	 SHORT $LN73@operator
$LN79@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 100  :         return _Fillch;

  000be	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c0	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000c3	8a 41 40	 mov	 al, BYTE PTR [ecx+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 773  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000c6	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 100  :         return _Fillch;

  000c9	88 45 e4	 mov	 BYTE PTR $T3[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 773  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000cc	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  000d5	83 f8 ff	 cmp	 eax, -1
  000d8	75 05		 jne	 SHORT $LN2@operator

; 774  :                     _State |= ios_base::badbit; // insertion failed, quit

  000da	8d 58 05	 lea	 ebx, DWORD PTR [eax+5]

; 775  :                     break;

  000dd	eb 65		 jmp	 SHORT $LN6@operator
$LN2@operator:

; 772  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000df	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000e2	83 c6 ff	 add	 esi, -1
  000e5	83 d7 ff	 adc	 edi, -1
  000e8	eb ca		 jmp	 SHORT $LL4@operator
$LN73@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  000ea	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 780  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  000ec	6a 00		 push	 0
  000ee	ff 75 e8	 push	 DWORD PTR __Count$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  000f1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 780  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  000f4	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000f7	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00101	3b 45 e8	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  00104	75 3b		 jne	 SHORT $LN80@operator
  00106	85 d2		 test	 edx, edx
  00108	75 37		 jne	 SHORT $LN80@operator
  0010a	8d 9b 00 00 00
	00		 npad	 6
$LL82@operator:

; 781  :             _State |= ios_base::badbit;
; 782  :         }
; 783  : 
; 784  :         if (_State == ios_base::goodbit) {
; 785  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00110	85 ff		 test	 edi, edi
  00112	7c 30		 jl	 SHORT $LN6@operator
  00114	7f 04		 jg	 SHORT $LN81@operator
  00116	85 f6		 test	 esi, esi
  00118	74 2a		 je	 SHORT $LN6@operator
$LN81@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 100  :         return _Fillch;

  0011a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0011d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011f	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00122	8a 41 40	 mov	 al, BYTE PTR [ecx+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 786  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00125	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 100  :         return _Fillch;

  00128	88 45 e4	 mov	 BYTE PTR $T2[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 786  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0012b	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00134	83 f8 ff	 cmp	 eax, -1
  00137	74 08		 je	 SHORT $LN80@operator

; 781  :             _State |= ios_base::badbit;
; 782  :         }
; 783  : 
; 784  :         if (_State == ios_base::goodbit) {
; 785  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00139	83 c6 ff	 add	 esi, -1
  0013c	83 d7 ff	 adc	 edi, -1
  0013f	eb cf		 jmp	 SHORT $LL82@operator
$LN80@operator:

; 787  :                     _State |= ios_base::badbit; // insertion failed, quit
; 788  :                     break;
; 789  :                 }
; 790  :             }
; 791  :         }
; 792  : 
; 793  :         _Ostr.width(0);

  00141	83 cb 04	 or	 ebx, 4
$LN6@operator:
  00144	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00147	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0014e	8b 06		 mov	 eax, DWORD PTR [esi]
  00150	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 364  :         _Wide                      = _Newwidth;

  00153	c7 44 30 20 00
	00 00 00	 mov	 DWORD PTR [eax+esi+32], 0
  0015b	c7 44 30 24 00
	00 00 00	 mov	 DWORD PTR [eax+esi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
  00163	eb 27		 jmp	 SHORT $LN22@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 794  :         _CATCH_IO_(ios_base, _Ostr)

  00165	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00168	6a 01		 push	 1
  0016a	6a 04		 push	 4
  0016c	8b 02		 mov	 eax, DWORD PTR [edx]
  0016e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00171	03 ca		 add	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00179	b8 00 00 00 00	 mov	 eax, $LN23@operator
  0017e	c3		 ret	 0
$LN23@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
  0017f	8b 5d ec	 mov	 ebx, DWORD PTR __State$[ebp]
  00182	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN88@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 795  :     }
; 796  : 
; 797  :     _Ostr.setstate(_State);

  00189	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
$LN22@operator:
  0018c	8b 06		 mov	 eax, DWORD PTR [esi]
  0018e	6a 00		 push	 0
  00190	53		 push	 ebx
  00191	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00194	03 ce		 add	 ecx, esi
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  0019c	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  001a3	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  001a8	84 c0		 test	 al, al
  001aa	75 09		 jne	 SHORT $LN57@operator

; 118  :                 this->_Myostr._Osfx();

  001ac	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN57@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  001b5	8b 55 dc	 mov	 edx, DWORD PTR __Ok$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  001b8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  001bc	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001be	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  001c1	8b 4c 11 38	 mov	 ecx, DWORD PTR [ecx+edx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 79   :             if (_Rdbuf) {

  001c5	85 c9		 test	 ecx, ecx
  001c7	74 05		 je	 SHORT $LN83@operator

; 80   :                 _Rdbuf->_Unlock();

  001c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001cb	ff 52 08	 call	 DWORD PTR [edx+8]
$LN83@operator:

; 798  :     return _Ostr;
; 799  : }

  001ce	8b c6		 mov	 eax, esi
  001d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001da	59		 pop	 ecx
  001db	5f		 pop	 edi
  001dc	5e		 pop	 esi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z
_TEXT	SEGMENT
tv134 = -8						; size = 8
tv131 = -8						; size = 8
_message$ = 8						; size = 4
_num$ = 12						; size = 4
?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z PROC	; QPTimer::PrintMinimumCyclesByIteration, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00013	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  00017	75 40		 jne	 SHORT $LN2@PrintMinim

; 141  : 	if(!DisableOutput)
; 142  : 		PrintCyclesByIteration(message,(double)minimumTime,num);

  00019	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0001c	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0001f	ff 75 0c	 push	 DWORD PTR _num$[ebp]
  00022	89 45 f8	 mov	 DWORD PTR tv134[ebp], eax
  00025	8b c1		 mov	 eax, ecx
  00027	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0002d	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00032	89 4d fc	 mov	 DWORD PTR tv134[ebp+4], ecx
  00035	83 ec 08	 sub	 esp, 8
  00038	df 6d f8	 fild	 QWORD PTR tv134[ebp]
  0003b	89 45 fc	 mov	 DWORD PTR tv131[ebp+4], eax
  0003e	8b ce		 mov	 ecx, esi
  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
  00047	df 6d f8	 fild	 QWORD PTR tv131[ebp]
  0004a	d9 e0		 fchs
  0004c	de c1		 faddp	 ST(1), ST(0)
  0004e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00051	ff 75 08	 push	 DWORD PTR _message$[ebp]
  00054	e8 00 00 00 00	 call	 ?PrintCyclesByIteration@QPTimer@@AAEXPBDNH@Z ; QPTimer::PrintCyclesByIteration
$LN2@PrintMinim:
  00059	5e		 pop	 esi

; 143  : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ENDP	; QPTimer::PrintMinimumCyclesByIteration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintMinimumCycles@QPTimer@@QAEXPBD@Z
_TEXT	SEGMENT
tv134 = -8						; size = 8
tv131 = -8						; size = 8
_message$ = 8						; size = 4
?PrintMinimumCycles@QPTimer@@QAEXPBD@Z PROC		; QPTimer::PrintMinimumCycles, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00013	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  00017	75 3d		 jne	 SHORT $LN2@PrintMinim

; 134  : 	if(!DisableOutput)
; 135  : 		PrintCycles(message,(double)minimumTime);

  00019	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0001c	83 ec 08	 sub	 esp, 8
  0001f	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00022	8b ce		 mov	 ecx, esi
  00024	89 45 f8	 mov	 DWORD PTR tv134[ebp], eax
  00027	8b c2		 mov	 eax, edx
  00029	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0002f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00034	89 55 fc	 mov	 DWORD PTR tv134[ebp+4], edx
  00037	df 6d f8	 fild	 QWORD PTR tv134[ebp]
  0003a	89 45 fc	 mov	 DWORD PTR tv131[ebp+4], eax
  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
  00044	df 6d f8	 fild	 QWORD PTR tv131[ebp]
  00047	d9 e0		 fchs
  00049	de c1		 faddp	 ST(1), ST(0)
  0004b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0004e	ff 75 08	 push	 DWORD PTR _message$[ebp]
  00051	e8 00 00 00 00	 call	 ?PrintCycles@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintCycles
$LN2@PrintMinim:
  00056	5e		 pop	 esi

; 136  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?PrintMinimumCycles@QPTimer@@QAEXPBD@Z ENDP		; QPTimer::PrintMinimumCycles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintMinimumTime@QPTimer@@QAEXPBD@Z
_TEXT	SEGMENT
tv134 = -8						; size = 8
tv131 = -8						; size = 8
_message$ = 8						; size = 4
?PrintMinimumTime@QPTimer@@QAEXPBD@Z PROC		; QPTimer::PrintMinimumTime, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00013	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  00017	75 3d		 jne	 SHORT $LN2@PrintMinim

; 127  : 	if(!DisableOutput)
; 128  : 		PrintTimeSeconds(message,(double)minimumTime);

  00019	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0001c	83 ec 08	 sub	 esp, 8
  0001f	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00022	8b ce		 mov	 ecx, esi
  00024	89 45 f8	 mov	 DWORD PTR tv134[ebp], eax
  00027	8b c2		 mov	 eax, edx
  00029	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0002f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00034	89 55 fc	 mov	 DWORD PTR tv134[ebp+4], edx
  00037	df 6d f8	 fild	 QWORD PTR tv134[ebp]
  0003a	89 45 fc	 mov	 DWORD PTR tv131[ebp+4], eax
  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
  00044	df 6d f8	 fild	 QWORD PTR tv131[ebp]
  00047	d9 e0		 fchs
  00049	de c1		 faddp	 ST(1), ST(0)
  0004b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0004e	ff 75 08	 push	 DWORD PTR _message$[ebp]
  00051	e8 00 00 00 00	 call	 ?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintTimeSeconds
$LN2@PrintMinim:
  00056	5e		 pop	 esi

; 129  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?PrintMinimumTime@QPTimer@@QAEXPBD@Z ENDP		; QPTimer::PrintMinimumTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintMeanCycles@QPTimer@@QAEXPBD@Z
_TEXT	SEGMENT
tv173 = -8						; size = 8
tv170 = -8						; size = 8
_message$ = 8						; size = 4
?PrintMeanCycles@QPTimer@@QAEXPBD@Z PROC		; QPTimer::PrintMeanCycles, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00013	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  00017	75 79		 jne	 SHORT $LN2@PrintMeanC

; 161  : 	if(!DisableOutput)
; 162  : 	{
; 163  : 		double MeanCycles ;
; 164  : 		MeanCycles = ((double)totalTime/times);
; 165  : 
; 166  : 		PrintCycles(message,MeanCycles );

  00019	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001c	83 ec 08	 sub	 esp, 8
  0001f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00022	8b ce		 mov	 ecx, esi
  00024	89 45 f8	 mov	 DWORD PTR tv173[ebp], eax
  00027	8b c2		 mov	 eax, edx
  00029	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0002f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00034	89 55 fc	 mov	 DWORD PTR tv173[ebp+4], edx
  00037	df 6d f8	 fild	 QWORD PTR tv173[ebp]
  0003a	89 45 fc	 mov	 DWORD PTR tv170[ebp+4], eax
  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv170[ebp], 0
  00044	df 6d f8	 fild	 QWORD PTR tv170[ebp]
  00047	d9 e0		 fchs
  00049	de c1		 faddp	 ST(1), ST(0)
  0004b	da 76 28	 fidiv	 DWORD PTR [esi+40]
  0004e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00051	ff 75 08	 push	 DWORD PTR _message$[ebp]
  00054	e8 00 00 00 00	 call	 ?PrintCycles@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintCycles

; 167  : 		cout << "   (in " << times << " measures)" <<endl;

  00059	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CHDMIBHC@?5measures?$CJ@
  00063	ff 76 28	 push	 DWORD PTR [esi+40]
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_07MLOIGAKO@?5?5?5?$CIin?5@
  0006b	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00071	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00076	83 c4 08	 add	 esp, 8
  00079	8b c8		 mov	 ecx, eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00087	83 c4 08	 add	 esp, 8
  0008a	8b c8		 mov	 ecx, eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
$LN2@PrintMeanC:
  00092	5e		 pop	 esi

; 168  : 	}
; 169  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
?PrintMeanCycles@QPTimer@@QAEXPBD@Z ENDP		; QPTimer::PrintMeanCycles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintMeanTime@QPTimer@@QAEXPBD@Z
_TEXT	SEGMENT
tv173 = -8						; size = 8
tv170 = -8						; size = 8
_message$ = 8						; size = 4
?PrintMeanTime@QPTimer@@QAEXPBD@Z PROC			; QPTimer::PrintMeanTime, COMDAT
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00013	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  00017	75 79		 jne	 SHORT $LN2@PrintMeanT

; 148  : 	if(!DisableOutput)
; 149  : 	{
; 150  : 		double MeanTime ;
; 151  : 		MeanTime = ((double)totalTime/times);
; 152  : 
; 153  : 		PrintTimeSeconds(message,MeanTime);

  00019	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001c	83 ec 08	 sub	 esp, 8
  0001f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00022	8b ce		 mov	 ecx, esi
  00024	89 45 f8	 mov	 DWORD PTR tv173[ebp], eax
  00027	8b c2		 mov	 eax, edx
  00029	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0002f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00034	89 55 fc	 mov	 DWORD PTR tv173[ebp+4], edx
  00037	df 6d f8	 fild	 QWORD PTR tv173[ebp]
  0003a	89 45 fc	 mov	 DWORD PTR tv170[ebp+4], eax
  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv170[ebp], 0
  00044	df 6d f8	 fild	 QWORD PTR tv170[ebp]
  00047	d9 e0		 fchs
  00049	de c1		 faddp	 ST(1), ST(0)
  0004b	da 76 28	 fidiv	 DWORD PTR [esi+40]
  0004e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00051	ff 75 08	 push	 DWORD PTR _message$[ebp]
  00054	e8 00 00 00 00	 call	 ?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintTimeSeconds

; 154  : 		cout << "   (in " << times << " measures)" <<endl;

  00059	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CHDMIBHC@?5measures?$CJ@
  00063	ff 76 28	 push	 DWORD PTR [esi+40]
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_07MLOIGAKO@?5?5?5?$CIin?5@
  0006b	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00071	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00076	83 c4 08	 add	 esp, 8
  00079	8b c8		 mov	 ecx, eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00087	83 c4 08	 add	 esp, 8
  0008a	8b c8		 mov	 ecx, eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
$LN2@PrintMeanT:
  00092	5e		 pop	 esi

; 155  : 	}
; 156  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
?PrintMeanTime@QPTimer@@QAEXPBD@Z ENDP			; QPTimer::PrintMeanTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintCycles@QPTimer@@QAEXPBD@Z
_TEXT	SEGMENT
tv134 = -8						; size = 8
tv131 = -8						; size = 8
_message$ = 8						; size = 4
?PrintCycles@QPTimer@@QAEXPBD@Z PROC			; QPTimer::PrintCycles, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00013	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  00017	75 3d		 jne	 SHORT $LN2@PrintCycle

; 120  : 	if(!DisableOutput)
; 121  : 		PrintCycles(message,(double)result);

  00019	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001c	83 ec 08	 sub	 esp, 8
  0001f	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00022	8b ce		 mov	 ecx, esi
  00024	89 45 f8	 mov	 DWORD PTR tv134[ebp], eax
  00027	8b c2		 mov	 eax, edx
  00029	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0002f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00034	89 55 fc	 mov	 DWORD PTR tv134[ebp+4], edx
  00037	df 6d f8	 fild	 QWORD PTR tv134[ebp]
  0003a	89 45 fc	 mov	 DWORD PTR tv131[ebp+4], eax
  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
  00044	df 6d f8	 fild	 QWORD PTR tv131[ebp]
  00047	d9 e0		 fchs
  00049	de c1		 faddp	 ST(1), ST(0)
  0004b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0004e	ff 75 08	 push	 DWORD PTR _message$[ebp]
  00051	e8 00 00 00 00	 call	 ?PrintCycles@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintCycles
$LN2@PrintCycle:
  00056	5e		 pop	 esi

; 122  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?PrintCycles@QPTimer@@QAEXPBD@Z ENDP			; QPTimer::PrintCycles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintTime@QPTimer@@QAEXPBD@Z
_TEXT	SEGMENT
tv134 = -8						; size = 8
tv131 = -8						; size = 8
_message$ = 8						; size = 4
?PrintTime@QPTimer@@QAEXPBD@Z PROC			; QPTimer::PrintTime, COMDAT
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00013	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  00017	75 3d		 jne	 SHORT $LN2@PrintTime

; 113  : 	if(!DisableOutput)
; 114  : 		PrintTimeSeconds(message,(double)result);

  00019	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001c	83 ec 08	 sub	 esp, 8
  0001f	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00022	8b ce		 mov	 ecx, esi
  00024	89 45 f8	 mov	 DWORD PTR tv134[ebp], eax
  00027	8b c2		 mov	 eax, edx
  00029	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0002f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00034	89 55 fc	 mov	 DWORD PTR tv134[ebp+4], edx
  00037	df 6d f8	 fild	 QWORD PTR tv134[ebp]
  0003a	89 45 fc	 mov	 DWORD PTR tv131[ebp+4], eax
  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
  00044	df 6d f8	 fild	 QWORD PTR tv131[ebp]
  00047	d9 e0		 fchs
  00049	de c1		 faddp	 ST(1), ST(0)
  0004b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0004e	ff 75 08	 push	 DWORD PTR _message$[ebp]
  00051	e8 00 00 00 00	 call	 ?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z ; QPTimer::PrintTimeSeconds
$LN2@PrintTime:
  00056	5e		 pop	 esi

; 115  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?PrintTime@QPTimer@@QAEXPBD@Z ENDP			; QPTimer::PrintTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?ResetAll@QPTimer@@QAEXXZ
_TEXT	SEGMENT
?ResetAll@QPTimer@@QAEXXZ PROC				; QPTimer::ResetAll, COMDAT
; _this$ = ecx

; 101  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00014	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001b	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
  00022	c7 46 1c ff ff
	ff ff		 mov	 DWORD PTR [esi+28], -1
  00029	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00030	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00037	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  0003e	5e		 pop	 esi
  0003f	c3		 ret	 0
?ResetAll@QPTimer@@QAEXXZ ENDP				; QPTimer::ResetAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?Reset@QPTimer@@QAEXXZ
_TEXT	SEGMENT
?Reset@QPTimer@@QAEXXZ PROC				; QPTimer::Reset, COMDAT
; _this$ = ecx

; 94   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00014	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001b	5e		 pop	 esi
  0001c	c3		 ret	 0
?Reset@QPTimer@@QAEXXZ ENDP				; QPTimer::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?Calibrate@QPTimer@@QAEXXZ
_TEXT	SEGMENT
_r$1 = -16						; size = 8
_now$2 = -8						; size = 8
?Calibrate@QPTimer@@QAEXXZ PROC				; QPTimer::Calibrate, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00014	c7 46 20 ff ff
	ff ff		 mov	 DWORD PTR [esi+32], -1
  0001b	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
  00020	c7 46 24 ff ff
	ff ff		 mov	 DWORD PTR [esi+36], -1
$LL4@Calibrate:

; 76   : 	{
; 77   : 		DWORD64 r;
; 78   : 		DWORD64 now;
; 79   : 
; 80   : 		ReadCycles(&startTime);

  00027	56		 push	 esi
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?ReadCycles@QPTimer@@AAEXPA_K@Z ; QPTimer::ReadCycles

; 81   : 		ReadCycles(&now);

  0002f	8d 45 f8	 lea	 eax, DWORD PTR _now$2[ebp]
  00032	8b ce		 mov	 ecx, esi
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?ReadCycles@QPTimer@@AAEXPA_K@Z ; QPTimer::ReadCycles

; 82   : 
; 83   : 		RestCycles(&r,now,startTime);

  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	8d 45 f0	 lea	 eax, DWORD PTR _r$1[ebp]
  00040	8b ce		 mov	 ecx, esi
  00042	ff 36		 push	 DWORD PTR [esi]
  00044	ff 75 fc	 push	 DWORD PTR _now$2[ebp+4]
  00047	ff 75 f8	 push	 DWORD PTR _now$2[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?RestCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::RestCycles

; 84   : 		
; 85   : 		if (overhead > r)

  00050	8b 4d f4	 mov	 ecx, DWORD PTR _r$1[ebp+4]
  00053	39 4e 24	 cmp	 DWORD PTR [esi+36], ecx
  00056	72 10		 jb	 SHORT $LN2@Calibrate
  00058	8b 45 f0	 mov	 eax, DWORD PTR _r$1[ebp]
  0005b	77 05		 ja	 SHORT $LN11@Calibrate
  0005d	39 46 20	 cmp	 DWORD PTR [esi+32], eax
  00060	76 06		 jbe	 SHORT $LN2@Calibrate
$LN11@Calibrate:

; 86   : 			overhead = r;

  00062	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00065	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
$LN2@Calibrate:

; 72   : 	int test_times=50;
; 73   : 	overhead= MAX_64BIT_VALUE;
; 74   : 
; 75   : 	for (int i=0; i<test_times; i++)

  00068	83 ef 01	 sub	 edi, 1
  0006b	75 ba		 jne	 SHORT $LL4@Calibrate

; 87   : 	}
; 88   : 	ResetAll();

  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?ResetAll@QPTimer@@QAEXXZ ; QPTimer::ResetAll
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi

; 89   : }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?Calibrate@QPTimer@@QAEXXZ ENDP				; QPTimer::Calibrate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?Stop@QPTimer@@QAEXXZ
_TEXT	SEGMENT
_r$ = -12						; size = 8
_now$ = -12						; size = 8
_this$1$ = -4						; size = 4
?Stop@QPTimer@@QAEXXZ PROC				; QPTimer::Stop, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000e	56		 push	 esi
  0000f	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00012	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00017	8d 45 f4	 lea	 eax, DWORD PTR _now$[ebp]
  0001a	8b cb		 mov	 ecx, ebx
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?ReadCycles@QPTimer@@AAEXPA_K@Z ; QPTimer::ReadCycles
  00022	ff 73 04	 push	 DWORD PTR [ebx+4]
  00025	8d 45 f4	 lea	 eax, DWORD PTR _r$[ebp]
  00028	8b cb		 mov	 ecx, ebx
  0002a	ff 33		 push	 DWORD PTR [ebx]
  0002c	ff 75 f8	 push	 DWORD PTR _now$[ebp+4]
  0002f	ff 75 f4	 push	 DWORD PTR _now$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?RestCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::RestCycles
  00038	ff 73 24	 push	 DWORD PTR [ebx+36]
  0003b	8d 45 f4	 lea	 eax, DWORD PTR _r$[ebp]
  0003e	8b cb		 mov	 ecx, ebx
  00040	ff 73 20	 push	 DWORD PTR [ebx+32]
  00043	ff 75 f8	 push	 DWORD PTR _r$[ebp+4]
  00046	ff 75 f4	 push	 DWORD PTR _r$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?RestCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::RestCycles
  0004f	ff 75 f8	 push	 DWORD PTR _r$[ebp+4]
  00052	8b 75 f4	 mov	 esi, DWORD PTR _r$[ebp]
  00055	83 c3 08	 add	 ebx, 8
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0005b	56		 push	 esi
  0005c	ff 73 04	 push	 DWORD PTR [ebx+4]
  0005f	ff 33		 push	 DWORD PTR [ebx]
  00061	53		 push	 ebx
  00062	e8 00 00 00 00	 call	 ?AddCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::AddCycles
  00067	ff 75 f8	 push	 DWORD PTR _r$[ebp+4]
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0006d	83 c0 10	 add	 eax, 16			; 00000010H
  00070	56		 push	 esi
  00071	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  00074	8b ce		 mov	 ecx, esi
  00076	ff 70 04	 push	 DWORD PTR [eax+4]
  00079	ff 30		 push	 DWORD PTR [eax]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?AddCycles@QPTimer@@AAEXPA_K_K1@Z ; QPTimer::AddCycles
  00081	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	39 4e 1c	 cmp	 DWORD PTR [esi+28], ecx
  00089	72 0d		 jb	 SHORT $LN6@Stop

; 52   : 	DWORD64 now;
; 53   : 	ReadCycles(&now);
; 54   : 
; 55   : 	DWORD64 r;
; 56   : 	RestCycles(&r,now,startTime);
; 57   : 	RestCycles(&r,r,overhead);
; 58   : 
; 59   : 	AddCycles(&result,result,r);
; 60   : 
; 61   : 	AddCycles(&totalTime,totalTime,r);
; 62   : 
; 63   : 	if (minimumTime > result)

  0008b	77 05		 ja	 SHORT $LN4@Stop
  0008d	39 46 18	 cmp	 DWORD PTR [esi+24], eax
  00090	76 06		 jbe	 SHORT $LN6@Stop
$LN4@Stop:

; 64   : 			minimumTime = result;

  00092	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00095	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx
$LN6@Stop:

; 65   : 
; 66   : 	times++;
; 67   : }

  00098	ff 46 28	 inc	 DWORD PTR [esi+40]
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?Stop@QPTimer@@QAEXXZ ENDP				; QPTimer::Stop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?Start@QPTimer@@QAEXXZ
_TEXT	SEGMENT
?Start@QPTimer@@QAEXXZ PROC				; QPTimer::Start, COMDAT
; _this$ = ecx

; 45   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	56		 push	 esi
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?ReadCycles@QPTimer@@AAEXPA_K@Z ; QPTimer::ReadCycles
  00015	5e		 pop	 esi
  00016	c3		 ret	 0
?Start@QPTimer@@QAEXXZ ENDP				; QPTimer::Start
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?NumberOfMeasures@QPTimer@@QAEHXZ
_TEXT	SEGMENT
?NumberOfMeasures@QPTimer@@QAEHXZ PROC			; QPTimer::NumberOfMeasures, COMDAT
; _this$ = ecx

; 171  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
?NumberOfMeasures@QPTimer@@QAEHXZ ENDP			; QPTimer::NumberOfMeasures
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ??0QPTimer@@QAE@XZ
_TEXT	SEGMENT
??0QPTimer@@QAE@XZ PROC					; QPTimer::QPTimer, COMDAT
; _this$ = ecx

; 32   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	8b ce		 mov	 ecx, esi
  0000f	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
  00016	c7 46 1c ff ff
	ff ff		 mov	 DWORD PTR [esi+28], -1
  0001d	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00024	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0002b	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00039	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00040	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset
  00045	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@41e4dc9380000000
  0004b	8b c6		 mov	 eax, esi
  0004d	dd 5e 30	 fstp	 QWORD PTR [esi+48]
  00050	c6 46 38 00	 mov	 BYTE PTR [esi+56], 0
  00054	5e		 pop	 esi
  00055	c3		 ret	 0
??0QPTimer@@QAE@XZ ENDP					; QPTimer::QPTimer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?AddCycles@QPTimer@@AAEXPA_K_K1@Z
_TEXT	SEGMENT
_c_add$ = 8						; size = 4
_c_final$ = 12						; size = 8
_c_init$ = 20						; size = 8
?AddCycles@QPTimer@@AAEXPA_K_K1@Z PROC			; QPTimer::AddCycles, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	8b 55 0c	 mov	 edx, DWORD PTR _c_final$[ebp]
  00010	03 55 14	 add	 edx, DWORD PTR _c_init$[ebp]
  00013	8b 45 08	 mov	 eax, DWORD PTR _c_add$[ebp]
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _c_final$[ebp+4]
  00019	13 4d 18	 adc	 ecx, DWORD PTR _c_init$[ebp+4]
  0001c	89 10		 mov	 DWORD PTR [eax], edx
  0001e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 227  : 	*c_add=c_final+c_init;
; 228  : }

  00021	5d		 pop	 ebp
  00022	c2 14 00	 ret	 20			; 00000014H
?AddCycles@QPTimer@@AAEXPA_K_K1@Z ENDP			; QPTimer::AddCycles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?RestCycles@QPTimer@@AAEXPA_K_K1@Z
_TEXT	SEGMENT
_c_dif$ = 8						; size = 4
_c_final$ = 12						; size = 8
_c_init$ = 20						; size = 8
?RestCycles@QPTimer@@AAEXPA_K_K1@Z PROC			; QPTimer::RestCycles, COMDAT
; _this$ = ecx

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	8b 55 0c	 mov	 edx, DWORD PTR _c_final$[ebp]
  00010	2b 55 14	 sub	 edx, DWORD PTR _c_init$[ebp]
  00013	8b 45 08	 mov	 eax, DWORD PTR _c_dif$[ebp]
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _c_final$[ebp+4]
  00019	1b 4d 18	 sbb	 ecx, DWORD PTR _c_init$[ebp+4]
  0001c	89 10		 mov	 DWORD PTR [eax], edx
  0001e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 221  : 	*c_dif=c_final-c_init;
; 222  : 
; 223  : }

  00021	5d		 pop	 ebp
  00022	c2 14 00	 ret	 20			; 00000014H
?RestCycles@QPTimer@@AAEXPA_K_K1@Z ENDP			; QPTimer::RestCycles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z
_TEXT	SEGMENT
_pc$ = 8						; size = 4
_cycles$ = 12						; size = 8
?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z PROC		; QPTimer::PrintTimeSeconds, COMDAT
; _this$ = ecx

; 213  : {   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  0000b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00010	dd 45 0c	 fld	 QWORD PTR _cycles$[ebp]
  00013	dc 76 30	 fdiv	 QWORD PTR [esi+48]
  00016	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0001b	83 ec 08	 sub	 esp, 8
  0001e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00021	ff 75 08	 push	 DWORD PTR _pc$[ebp]
  00024	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0002a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0002f	83 c4 08	 add	 esp, 8
  00032	8b c8		 mov	 ecx, eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  0003a	8b c8		 mov	 ecx, eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00042	5e		 pop	 esi

; 214  : 	cout << pc << cycles/QPFrequencyHz << endl;
; 215  : /*	if(pc!=NULL && strlen(pc)>0)
; 216  : 		printf("%s",pc);		*/
; 217  : }

  00043	5d		 pop	 ebp
  00044	c2 0c 00	 ret	 12			; 0000000cH
?PrintTimeSeconds@QPTimer@@AAEXPBDN@Z ENDP		; QPTimer::PrintTimeSeconds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintCyclesByIteration@QPTimer@@AAEXPBDNH@Z
_TEXT	SEGMENT
_pc$ = 8						; size = 4
_cycles$ = 12						; size = 8
_NumberOfIterations$ = 20				; size = 4
?PrintCyclesByIteration@QPTimer@@AAEXPBDNH@Z PROC	; QPTimer::PrintCyclesByIteration, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	db 45 14	 fild	 DWORD PTR _NumberOfIterations$[ebp]
  00010	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00015	83 ec 08	 sub	 esp, 8
  00018	dc 7d 0c	 fdivr	 QWORD PTR _cycles$[ebp]
  0001b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0001e	ff 75 08	 push	 DWORD PTR _pc$[ebp]
  00021	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00027	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0002c	83 c4 08	 add	 esp, 8
  0002f	8b c8		 mov	 ecx, eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@O@Z
  00037	8b c8		 mov	 ecx, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 206  : 	cout << pc << cycles/(long double)NumberOfIterations << endl;
; 207  : }	

  0003f	5d		 pop	 ebp
  00040	c2 10 00	 ret	 16			; 00000010H
?PrintCyclesByIteration@QPTimer@@AAEXPBDNH@Z ENDP	; QPTimer::PrintCyclesByIteration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?PrintCycles@QPTimer@@AAEXPBDN@Z
_TEXT	SEGMENT
_pc$ = 8						; size = 4
_cycles$ = 12						; size = 8
?PrintCycles@QPTimer@@AAEXPBDN@Z PROC			; QPTimer::PrintCycles, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	dd 45 0c	 fld	 QWORD PTR _cycles$[ebp]
  00010	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00015	83 ec 08	 sub	 esp, 8
  00018	dd 1c 24	 fstp	 QWORD PTR [esp]
  0001b	ff 75 08	 push	 DWORD PTR _pc$[ebp]
  0001e	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00024	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00029	83 c4 08	 add	 esp, 8
  0002c	8b c8		 mov	 ecx, eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  00034	8b c8		 mov	 ecx, eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 199  : 	cout << pc << cycles << endl;
; 200  : }	

  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
?PrintCycles@QPTimer@@AAEXPBDN@Z ENDP			; QPTimer::PrintCycles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?ReadCycles@QPTimer@@AAEXPA_K@Z
_TEXT	SEGMENT
_cycles$ = 8						; size = 4
?ReadCycles@QPTimer@@AAEXPA_K@Z PROC			; QPTimer::ReadCycles, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000e	0f 01 f9	 rdtscp
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _cycles$[ebp]
  00014	89 01		 mov	 DWORD PTR [ecx], eax
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 181  : 	unsigned int dummy;
; 182  : 
; 183  : 	*cycles = __rdtscp(&dummy);
; 184  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?ReadCycles@QPTimer@@AAEXPA_K@Z ENDP			; QPTimer::ReadCycles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00005	e9 00 00 00 00	 jmp	 @__CheckForDebuggerJustMyCode@4
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\QueryPerformanceTiming_rdtsc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET __A1AF8DEF_QueryPerformanceTiming_rdtsc@cpp
  00005	e9 00 00 00 00	 jmp	 @__CheckForDebuggerJustMyCode@4
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
