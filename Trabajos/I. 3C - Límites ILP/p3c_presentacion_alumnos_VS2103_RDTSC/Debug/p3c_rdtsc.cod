; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31104.0 

	TITLE	C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\Debug\p3c_rdtsc.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?a_int@@3PAHA					; a_int
PUBLIC	?b_int@@3PAHA					; b_int
PUBLIC	?a@@3PAMA					; a
PUBLIC	?b@@3PAMA					; b
PUBLIC	?c@@3PAMA					; c
PUBLIC	?d@@3PAMA					; d
PUBLIC	?e@@3PAMA					; e
PUBLIC	?f@@3PAMA					; f
PUBLIC	?g@@3PAMA					; g
PUBLIC	?h@@3PAMA					; h
PUBLIC	?z@@3MA						; z
PUBLIC	?cond1@@3PAHA					; cond1
PUBLIC	?cond2@@3PAHA					; cond2
PUBLIC	?cond3@@3PAHA					; cond3
_BSS	SEGMENT
?a_int@@3PAHA DD 0800H DUP (?)				; a_int
?b_int@@3PAHA DD 0808H DUP (?)				; b_int
?a@@3PAMA DD	0808H DUP (?)				; a
?b@@3PAMA DD	0808H DUP (?)				; b
?c@@3PAMA DD	0808H DUP (?)				; c
?d@@3PAMA DD	0808H DUP (?)				; d
?e@@3PAMA DD	0808H DUP (?)				; e
?f@@3PAMA DD	0808H DUP (?)				; f
?g@@3PAMA DD	0808H DUP (?)				; g
?h@@3PAMA DD	0808H DUP (?)				; h
?z@@3MA	DD	01H DUP (?)				; z
?cond1@@3PAHA DD 0800H DUP (?)				; cond1
?cond2@@3PAHA DD 0808H DUP (?)				; cond2
?cond3@@3PAHA DD 0808H DUP (?)				; cond3
_BSS	ENDS
msvcjmc	SEGMENT
__F32AA0BD_concurrencysal@h DB 01H
__5A3A63C4_sal@h DB 01H
__6BEC7B3D_vadefs@h DB 01H
__1BC54112_vcruntime@h DB 01H
__6569C2CA_corecrt@h DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__6C20D4D3_corecrt_malloc@h DB 01H
__C9393812_stddef@h DB 01H
__D493B9BD_corecrt_search@h DB 01H
__1473E23E_corecrt_wstdlib@h DB 01H
__AD973B64_limits@h DB 01H
__B49664B7_stdlib@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__91D68F2D_math@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__A0B61CF9_time@h DB 01H
__FF18040F_xkeycheck@h DB 01H
__3779B844_yvals_core@h DB 01H
__62B17962_climits DB 01H
__EDB62062_vcruntime_new@h DB 01H
__5858FF13_vcruntime_new_debug@h DB 01H
__49916C16_crtdbg@h DB 01H
__41ABBF80_crtdefs@h DB 01H
__F1399E15_use_ansi@h DB 01H
__501EED2F_yvals@h DB 01H
__E65E5B90_cstdlib DB 01H
__0A37AC5C_xtr1common DB 01H
__D986D001_intrin0@inl@h DB 01H
__5886068B_intrin0@h DB 01H
__38806D73_cmath DB 01H
__A913C05D_cstdio DB 01H
__CDDAF8CA_errno@h DB 01H
__4041E9ED_vcruntime_string@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__AACCF370_cstring DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__5DB64B66_corecrt_wctype@h DB 01H
__CB8D9B53_corecrt_wdirect@h DB 01H
__A9063C41_corecrt_share@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__61BDDCD5_corecrt_wprocess@h DB 01H
__64F617E8_types@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__3398160E_cwchar DB 01H
__4395813D_cstddef DB 01H
__E9ECD68E_initializer_list DB 01H
__264C4909_xstddef DB 01H
__70589338_iosfwd DB 01H
__13E1155B_stdint@h DB 01H
__5B00BAED_cstdint DB 01H
__B1B1C2C4_type_traits DB 01H
__D153DE1B_utility DB 01H
__7F396DA6_xutility DB 01H
__6E95DAE6_iterator DB 01H
__5B81F060_share@h DB 01H
__4926392B___msvc_system_error_abi@hpp DB 01H
__3432B4A6_cerrno DB 01H
__20BB4341_malloc@h DB 01H
__3C5D8049_corecrt_terminate@h DB 01H
__18EF2578_eh@h DB 01H
__50B6FA41_vcruntime_exception@h DB 01H
__89F4D116_exception DB 01H
__158E8E48_float@h DB 01H
__DA570BDA_cfloat DB 01H
__93CAE39E_isa_availability@h DB 01H
__BCB146BE_limits DB 01H
__F32E7743_new DB 01H
__83F85DC0_xatomic@h DB 01H
__BBC6BDD8_xmemory DB 01H
__CF153B44_xstring DB 01H
__00BAEB4B_stdexcept DB 01H
__74E16614_xcall_once@h DB 01H
__F88BF820_xerrc@h DB 01H
__FE33F17B_ctime DB 01H
__C9FD8EE7_xtimec@h DB 01H
__9077A9A6_xthreads@h DB 01H
__D7841A7C_atomic DB 01H
__CBBC7434_system_error DB 01H
__A784D2C3_vcruntime_typeinfo@h DB 01H
__0FE69EBF_typeinfo DB 01H
__001F4A30_memory DB 01H
__2C5A1D3F_xfacet DB 01H
__61AD4BC5___msvc_xlocinfo_types@hpp DB 01H
__B2D2BA86_ctype@h DB 01H
__A6D827FA_cctype DB 01H
__A3D09DBA_locale@h DB 01H
__75F28741_clocale DB 01H
__106F7D77_xlocinfo DB 01H
__102B4F75_xlocale DB 01H
__298A0A64_xiosbase DB 01H
__021A53F7_streambuf DB 01H
__8EAC2962_xlocnum DB 01H
__0BE34D55_ios DB 01H
__033B95B1_ostream DB 01H
__60EBA08B_istream DB 01H
__1D4017B9_iostream DB 01H
__D0DFFAC6_winpackagefamily@h DB 01H
__D0D0F397_winapifamily@h DB 01H
__94A3FDDD_sdkddkver@h DB 01H
__AF2AD727_excpt@h DB 01H
__273EAB94_stdarg@h DB 01H
__1C9F390F_specstrings_undef@h DB 01H
__36A21E95_specstrings_strict@h DB 01H
__452FE810_sdv_driverspecs@h DB 01H
__30F344B3_driverspecs@h DB 01H
__BD886E18_specstrings@h DB 01H
__BF9C347F_kernelspecs@h DB 01H
__79C7FC57_basetsd@h DB 01H
__D545DD43_guiddef@h DB 01H
__DF4F952E_pshpack4@h DB 01H
__7FCD0577_poppack@h DB 01H
__DBC2E99C_pshpack2@h DB 01H
__D6556C4A_pshpack8@h DB 01H
__D98457C5_pshpack1@h DB 01H
__614C4572_apiset@h DB 01H
__8500295D_ktmtypes@h DB 01H
__D5DDFBF3_winnt@h DB 01H
__156BD51A_minwindef@h DB 01H
__F9B9A8F7_windef@h DB 01H
__BD2C4590_apisetcconv@h DB 01H
__18251742_minwinbase@h DB 01H
__23611203_apiquery2@h DB 01H
__C914CD48_processenv@h DB 01H
__996311FD_fileapi@h DB 01H
__41AEF397_fileapifromapp@h DB 01H
__65579FF3_debugapi@h DB 01H
__476FCB5A_utilapiset@h DB 01H
__089D2E42_handleapi@h DB 01H
__B16F04F5_errhandlingapi@h DB 01H
__81CCB02F_fibersapi@h DB 01H
__A9B4C5F0_namedpipeapi@h DB 01H
__C209F2C8_profileapi@h DB 01H
__34C22DC8_heapapi@h DB 01H
__8A238485_ioapiset@h DB 01H
__4826BA69_synchapi@h DB 01H
__6A31599C_interlockedapi@h DB 01H
__439612F0_processthreadsapi@h DB 01H
__7BB37CFA_sysinfoapi@h DB 01H
__5733279A_memoryapi@h DB 01H
__6D078C0D_enclaveapi@h DB 01H
__3663CE50_threadpoollegacyapiset@h DB 01H
__E16717D9_threadpoolapiset@h DB 01H
__4A6035CC_jobapi@h DB 01H
__62EEB553_jobapi2@h DB 01H
__9F22E7EF_wow64apiset@h DB 01H
__E86B4A9A_libloaderapi@h DB 01H
__EB536E54_securitybaseapi@h DB 01H
__E915C287_namespaceapi@h DB 01H
__C66F44F2_systemtopologyapi@h DB 01H
__B6175B28_processtopologyapi@h DB 01H
__9E4AD838_securityappcontainer@h DB 01H
__F599FDAE_realtimeapiset@h DB 01H
__D4435474_winerror@h DB 01H
__F94F31E6_timezoneapi@h DB 01H
__B3ED30D4_winbase@h DB 01H
__E9F7D11F_wingdi@h DB 01H
__AC21C382_tvout@h DB 01H
__DB057BA3_winuser@h DB 01H
__A1BAD304_datetimeapi@h DB 01H
__30E2BD27_winnls@h DB 01H
__B7FF4B97_stringapiset@h DB 01H
__66C87297_wincontypes@h DB 01H
__1317218F_consoleapi@h DB 01H
__8D62D26D_consoleapi2@h DB 01H
__8CA0B85A_consoleapi3@h DB 01H
__CE39E65B_wincon@h DB 01H
__F6801ACC_verrsrc@h DB 01H
__1CB844D9_winver@h DB 01H
__D0CFA71C_reason@h DB 01H
__F3D58382_winreg@h DB 01H
__34C28572_wnnc@h DB 01H
__0617DE59_winnetwk@h DB 01H
__93AC9EF8_cderr@h DB 01H
__3AE29FFA_dde@h DB 01H
__48250249_ddeml@h DB 01H
__4605C6DD_dlgs@h DB 01H
__C826BBA2_lzexpand@h DB 01H
__B8DFB118_mmsyscom@h DB 01H
__EDC2A662_mciapi@h DB 01H
__87B17D5B_mmiscapi@h DB 01H
__0C4862FC_mmiscapi2@h DB 01H
__83F5D08C_playsoundapi@h DB 01H
__CA3F1D44_mmeapi@h DB 01H
__BD2270BE_timeapi@h DB 01H
__397CAA2F_joystickapi@h DB 01H
__05A21AEE_mmsystem@h DB 01H
__6E1DF0B6_nb30@h DB 01H
__75098885_rpcdcep@h DB 01H
__D8AC8DD5_rpcdce@h DB 01H
__2F1118EF_rpcnsi@h DB 01H
__0DE10DFC_rpcnterr@h DB 01H
__4497164E_rpcasync@h DB 01H
__06CA6763_rpc@h DB 01H
__C32EC2F2_shellapi@h DB 01H
__B289ECB8_winperf@h DB 01H
__07EA6B7C_inaddr@h DB 01H
__9ED0251E_winsock@h DB 01H
__FD938996_bcrypt@h DB 01H
__4E32BFB9_ncrypt@h DB 01H
__815AA9AD_dpapi@h DB 01H
__0B2E95FF_wincrypt@h DB 01H
__288F6C52_winefs@h DB 01H
__B3F2ECA2_rpcnsip@h DB 01H
__AFB43543_rpcsal@h DB 01H
__16A21838_rpcndr@h DB 01H
__5314805F_wtypesbase@h DB 01H
__6EEE3703_wtypes@h DB 01H
__A7113148_winioctl@h DB 01H
__C595A37C_winsmcrd@h DB 01H
__42C56FB7_winscard@h DB 01H
__C4703BCA_prsht@h DB 01H
__D4D77F19_winspool@h DB 01H
__B47185B4_unknwnbase@h DB 01H
__B64C33F8_objidlbase@h DB 01H
__EA871F04_cguid@h DB 01H
__C78732AB_combaseapi@h DB 01H
__744BF5DA_unknwn@h DB 01H
__66C491E7_objidl@h DB 01H
__A217658B_oaidl@h DB 01H
__8485F416_propidlbase@h DB 01H
__65805CE1_coml2api@h DB 01H
__C7AD586F_oleidl@h DB 01H
__CBE55221_servprov@h DB 01H
__5B1E268A_msxml@h DB 01H
__1B3D3678_urlmon@h DB 01H
__EC5BC72C_propidl@h DB 01H
__0DD0E8F8_objbase@h DB 01H
__6DA674A0_oleauto@h DB 01H
__F7931962_ole2@h DB 01H
__870E9EB1_commdlg@h DB 01H
__A118E6DC_stralign@h DB 01H
__8B10FA9F_winsvc@h DB 01H
__BEDBF511_mcx@h DB 01H
__D3BCC989_ime_cmodes@h DB 01H
__B1694579_imm@h DB 01H
__CFBCA79E_Windows@h DB 01H
__383FB5F5_QueryPerformanceTiming_rdtsc@h DB 01H
__438567F7_p3c_rdtsc@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?vectors_init@@YAXXZ				; vectors_init
PUBLIC	?problemA@@YAMXZ				; problemA
PUBLIC	?problemB@@YAMXZ				; problemB
PUBLIC	?problemC@@YAMXZ				; problemC
PUBLIC	?problemD1@@YAMXZ				; problemD1
PUBLIC	?problemD2@@YAMXZ				; problemD2
PUBLIC	?example@@YAMXZ					; example
PUBLIC	_main
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_02KEGNLNML@?0?5@				; `string'
PUBLIC	??_C@_0FH@EDPCA@ONLY?5PRINTING?5OUTPUT?5VARIABLE?5T@ ; `string'
PUBLIC	??_C@_0BN@HBPNMGOO@?9Number?5of?5elements?5N_ELEM?3?5@ ; `string'
PUBLIC	??_C@_0BO@JIOOFBOJ@?9Number?5of?5measures?5example?3?5@ ; `string'
PUBLIC	??_C@_0BO@JDDFHLHO@?9Number?5of?5measures?5problem?3?5@ ; `string'
PUBLIC	??_C@_0DJ@FCIKOIGL@?5Minimum?5time?5in?5cycles?5for?5an?5@ ; `string'
PUBLIC	??_C@_0DL@KCLHKCKJ@?5Minimum?5time?5in?5cycles?5for?5an?5@ ; `string'
PUBLIC	??_C@_0DL@CMDIKFEK@?5Minimum?5time?5in?5cycles?5for?5an?5@ ; `string'
PUBLIC	??_C@_0DL@OAJCKFNE@?5Minimum?5time?5in?5cycles?5for?5an?5@ ; `string'
PUBLIC	??_C@_0DM@PKGCCOLH@?5Minimum?5time?5in?5cycles?5for?5an?5@ ; `string'
PUBLIC	??_C@_0DM@HEONCJFE@?5Minimum?5time?5in?5cycles?5for?5an?5@ ; `string'
PUBLIC	__real@38000100
PUBLIC	__real@3dba2e8c
PUBLIC	__real@3dcccccd
PUBLIC	__real@3de38e39
PUBLIC	__real@3e000000
PUBLIC	__real@3e124925
PUBLIC	__real@3e2aaaab
PUBLIC	__real@3e4ccccd
PUBLIC	__real@41000000
EXTRN	___std_terminate:PROC
EXTRN	__imp__rand:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	??0QPTimer@@QAE@XZ:PROC				; QPTimer::QPTimer
EXTRN	?NumberOfMeasures@QPTimer@@QAEHXZ:PROC		; QPTimer::NumberOfMeasures
EXTRN	?Start@QPTimer@@QAEXXZ:PROC			; QPTimer::Start
EXTRN	?Stop@QPTimer@@QAEXXZ:PROC			; QPTimer::Stop
EXTRN	?Calibrate@QPTimer@@QAEXXZ:PROC			; QPTimer::Calibrate
EXTRN	?Reset@QPTimer@@QAEXXZ:PROC			; QPTimer::Reset
EXTRN	?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z:PROC ; QPTimer::PrintMinimumCyclesByIteration
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e2aaaab
CONST	SEGMENT
__real@3e2aaaab DD 03e2aaaabr			; 0.166667
CONST	ENDS
;	COMDAT __real@3e124925
CONST	SEGMENT
__real@3e124925 DD 03e124925r			; 0.142857
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3de38e39
CONST	SEGMENT
__real@3de38e39 DD 03de38e39r			; 0.111111
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3dba2e8c
CONST	SEGMENT
__real@3dba2e8c DD 03dba2e8cr			; 0.0909091
CONST	ENDS
;	COMDAT __real@38000100
CONST	SEGMENT
__real@38000100 DD 038000100r			; 3.05185e-05
CONST	ENDS
;	COMDAT ??_C@_0DM@HEONCJFE@?5Minimum?5time?5in?5cycles?5for?5an?5@
CONST	SEGMENT
??_C@_0DM@HEONCJFE@?5Minimum?5time?5in?5cycles?5for?5an?5@ DB ' Minimum t'
	DB	'ime in cycles for an element of ''problem D2'' is: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@PKGCCOLH@?5Minimum?5time?5in?5cycles?5for?5an?5@
CONST	SEGMENT
??_C@_0DM@PKGCCOLH@?5Minimum?5time?5in?5cycles?5for?5an?5@ DB ' Minimum t'
	DB	'ime in cycles for an element of ''problem D1'' is: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@OAJCKFNE@?5Minimum?5time?5in?5cycles?5for?5an?5@
CONST	SEGMENT
??_C@_0DL@OAJCKFNE@?5Minimum?5time?5in?5cycles?5for?5an?5@ DB ' Minimum t'
	DB	'ime in cycles for an element of ''problem C'' is: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@CMDIKFEK@?5Minimum?5time?5in?5cycles?5for?5an?5@
CONST	SEGMENT
??_C@_0DL@CMDIKFEK@?5Minimum?5time?5in?5cycles?5for?5an?5@ DB ' Minimum t'
	DB	'ime in cycles for an element of ''problem B'' is: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KCLHKCKJ@?5Minimum?5time?5in?5cycles?5for?5an?5@
CONST	SEGMENT
??_C@_0DL@KCLHKCKJ@?5Minimum?5time?5in?5cycles?5for?5an?5@ DB ' Minimum t'
	DB	'ime in cycles for an element of ''problem A'' is: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FCIKOIGL@?5Minimum?5time?5in?5cycles?5for?5an?5@
CONST	SEGMENT
??_C@_0DJ@FCIKOIGL@?5Minimum?5time?5in?5cycles?5for?5an?5@ DB ' Minimum t'
	DB	'ime in cycles for an element of ''example'' is: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JDDFHLHO@?9Number?5of?5measures?5problem?3?5@
CONST	SEGMENT
??_C@_0BO@JDDFHLHO@?9Number?5of?5measures?5problem?3?5@ DB '-Number of me'
	DB	'asures problem: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JIOOFBOJ@?9Number?5of?5measures?5example?3?5@
CONST	SEGMENT
??_C@_0BO@JIOOFBOJ@?9Number?5of?5measures?5example?3?5@ DB '-Number of me'
	DB	'asures example: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HBPNMGOO@?9Number?5of?5elements?5N_ELEM?3?5@
CONST	SEGMENT
??_C@_0BN@HBPNMGOO@?9Number?5of?5elements?5N_ELEM?3?5@ DB '-Number of ele'
	DB	'ments N_ELEM: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@EDPCA@ONLY?5PRINTING?5OUTPUT?5VARIABLE?5T@
CONST	SEGMENT
??_C@_0FH@EDPCA@ONLY?5PRINTING?5OUTPUT?5VARIABLE?5T@ DB 'ONLY PRINTING OU'
	DB	'TPUT VARIABLE TO PREVENT THAT THE COMPILER ELIMINATES FUNCTIO'
	DB	'N CALLS: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$5
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002f	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00034	84 c0		 test	 al, al
  00036	75 08		 jne	 SHORT $LN2@sentry

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909
; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {
; 118  :                 this->_Myostr._Osfx();

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN2@sentry:

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004e	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 79   :             if (_Rdbuf) {

  00052	85 c9		 test	 ecx, ecx
  00054	74 05		 je	 SHORT $LN5@sentry

; 80   :                 _Rdbuf->_Unlock();

  00056	8b 01		 mov	 eax, DWORD PTR [ecx]
  00058	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:

; 119  :             }
; 120  :         }

  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
  0006b	cc		 int	 3
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00034	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]
  00037	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  00039	8b 07		 mov	 eax, DWORD PTR [edi]
  0003b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003e	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 72   :             if (_Rdbuf) {

  00042	85 c9		 test	 ecx, ecx
  00044	74 05		 je	 SHORT $LN8@sentry

; 73   :                 _Rdbuf->_Lock();

  00046	8b 01		 mov	 eax, DWORD PTR [ecx]
  00048	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@sentry:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 272  :         return _Mystate;

  0004b	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 272  :         return _Mystate;

  00054	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 291  :         return rdstate() == ios_base::goodbit;

  00057	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0

; 272  :         return _Mystate;

  0005c	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 92   :             if (!_Ostr.good()) {

  0005f	74 04		 je	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  00061	32 c0		 xor	 al, al

; 94   :                 return;

  00063	eb 22		 jmp	 SHORT $LN23@sentry
$LN2@sentry:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 69   :         return _Tiestr;

  00065	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  00068	85 c9		 test	 ecx, ecx
  0006a	74 19		 je	 SHORT $LN4@sentry
  0006c	3b cf		 cmp	 ecx, edi
  0006e	74 15		 je	 SHORT $LN4@sentry

; 100  :                 return;
; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 291  :         return rdstate() == ios_base::goodbit;

  00076	8b 07		 mov	 eax, DWORD PTR [edi]
  00078	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007b	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
  00080	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00083	eb 02		 jmp	 SHORT $LN23@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  00085	b0 01		 mov	 al, 1
$LN23@sentry:

; 105  :         }

  00087	88 46 04	 mov	 BYTE PTR [esi+4], al
  0008a	8b c6		 mov	 eax, esi
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 79   :             if (_Rdbuf) {

  0003a	85 c9		 test	 ecx, ecx
  0003c	74 05		 je	 SHORT $LN2@Sentry_bas

; 80   :                 _Rdbuf->_Unlock();

  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 81   :             }
; 82   :         }

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5e		 pop	 esi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
  00053	cc		 int	 3
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -36						; size = 8
$T2 = -28						; size = 1
$T3 = -28						; size = 1
__Count$2$ = -24					; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 757  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00030	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring

; 396  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00035	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 762  :     ios_base::iostate _State = ios_base::goodbit;

  00038	33 db		 xor	 ebx, ebx
  0003a	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring

; 396  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0003d	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL76@operator:
  00040	8a 02		 mov	 al, BYTE PTR [edx]
  00042	42		 inc	 edx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL76@operator
  00047	2b d1		 sub	 edx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 359  :         return _Wide;

  00049	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring

; 396  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004c	89 55 e8	 mov	 DWORD PTR __Count$2$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 359  :         return _Wide;

  0004f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00051	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00054	8b 7c 08 24	 mov	 edi, DWORD PTR [eax+ecx+36]
  00058	8b 74 08 20	 mov	 esi, DWORD PTR [eax+ecx+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 764  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0005c	85 ff		 test	 edi, edi
  0005e	7c 16		 jl	 SHORT $LN17@operator
  00060	7f 0e		 jg	 SHORT $LN78@operator
  00062	85 f6		 test	 esi, esi
  00064	74 10		 je	 SHORT $LN17@operator
  00066	85 ff		 test	 edi, edi
  00068	7c 0c		 jl	 SHORT $LN17@operator
  0006a	7f 04		 jg	 SHORT $LN78@operator
  0006c	3b f2		 cmp	 esi, edx
  0006e	76 06		 jbe	 SHORT $LN17@operator
$LN78@operator:
  00070	2b f2		 sub	 esi, edx
  00072	1b fb		 sbb	 edi, ebx
  00074	eb 04		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00076	33 f6		 xor	 esi, esi
  00078	33 ff		 xor	 edi, edi
$LN18@operator:

; 765  :     const typename _Myos::sentry _Ok(_Ostr);

  0007a	51		 push	 ecx
  0007b	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0007e	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 766  : 
; 767  :     if (!_Ok) {

  00083	80 7d e0 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00087	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008e	75 0a		 jne	 SHORT $LN8@operator

; 768  :         _State |= ios_base::badbit;

  00090	bb 04 00 00 00	 mov	 ebx, 4

; 769  :     } else { // state okay, insert

  00095	e9 ef 00 00 00	 jmp	 $LN88@operator
$LN8@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 322  :         return _Fmtfl;

  0009a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 770  :         _TRY_IO_BEGIN

  0009d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 322  :         return _Fmtfl;

  000a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a6	8b 44 08 14	 mov	 eax, DWORD PTR [eax+ecx+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 771  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000aa	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000af	83 f8 40	 cmp	 eax, 64			; 00000040H
  000b2	74 36		 je	 SHORT $LN73@operator
$LL4@operator:

; 772  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000b4	85 ff		 test	 edi, edi
  000b6	7c 32		 jl	 SHORT $LN73@operator
  000b8	7f 04		 jg	 SHORT $LN79@operator
  000ba	85 f6		 test	 esi, esi
  000bc	74 2c		 je	 SHORT $LN73@operator
$LN79@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 100  :         return _Fillch;

  000be	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c0	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000c3	8a 41 40	 mov	 al, BYTE PTR [ecx+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 773  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000c6	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 100  :         return _Fillch;

  000c9	88 45 e4	 mov	 BYTE PTR $T3[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 773  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000cc	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  000d5	83 f8 ff	 cmp	 eax, -1
  000d8	75 05		 jne	 SHORT $LN2@operator

; 774  :                     _State |= ios_base::badbit; // insertion failed, quit

  000da	8d 58 05	 lea	 ebx, DWORD PTR [eax+5]

; 775  :                     break;

  000dd	eb 65		 jmp	 SHORT $LN6@operator
$LN2@operator:

; 772  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000df	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000e2	83 c6 ff	 add	 esi, -1
  000e5	83 d7 ff	 adc	 edi, -1
  000e8	eb ca		 jmp	 SHORT $LL4@operator
$LN73@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  000ea	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 780  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  000ec	6a 00		 push	 0
  000ee	ff 75 e8	 push	 DWORD PTR __Count$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  000f1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 780  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  000f4	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000f7	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00101	3b 45 e8	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  00104	75 3b		 jne	 SHORT $LN80@operator
  00106	85 d2		 test	 edx, edx
  00108	75 37		 jne	 SHORT $LN80@operator
  0010a	8d 9b 00 00 00
	00		 npad	 6
$LL82@operator:

; 781  :             _State |= ios_base::badbit;
; 782  :         }
; 783  : 
; 784  :         if (_State == ios_base::goodbit) {
; 785  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00110	85 ff		 test	 edi, edi
  00112	7c 30		 jl	 SHORT $LN6@operator
  00114	7f 04		 jg	 SHORT $LN81@operator
  00116	85 f6		 test	 esi, esi
  00118	74 2a		 je	 SHORT $LN6@operator
$LN81@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 100  :         return _Fillch;

  0011a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0011d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011f	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00122	8a 41 40	 mov	 al, BYTE PTR [ecx+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 786  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00125	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 100  :         return _Fillch;

  00128	88 45 e4	 mov	 BYTE PTR $T2[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 786  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0012b	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00134	83 f8 ff	 cmp	 eax, -1
  00137	74 08		 je	 SHORT $LN80@operator

; 781  :             _State |= ios_base::badbit;
; 782  :         }
; 783  : 
; 784  :         if (_State == ios_base::goodbit) {
; 785  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00139	83 c6 ff	 add	 esi, -1
  0013c	83 d7 ff	 adc	 edi, -1
  0013f	eb cf		 jmp	 SHORT $LL82@operator
$LN80@operator:

; 787  :                     _State |= ios_base::badbit; // insertion failed, quit
; 788  :                     break;
; 789  :                 }
; 790  :             }
; 791  :         }
; 792  : 
; 793  :         _Ostr.width(0);

  00141	83 cb 04	 or	 ebx, 4
$LN6@operator:
  00144	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00147	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0014e	8b 06		 mov	 eax, DWORD PTR [esi]
  00150	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xiosbase

; 364  :         _Wide                      = _Newwidth;

  00153	c7 44 30 20 00
	00 00 00	 mov	 DWORD PTR [eax+esi+32], 0
  0015b	c7 44 30 24 00
	00 00 00	 mov	 DWORD PTR [eax+esi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
  00163	eb 27		 jmp	 SHORT $LN22@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 794  :         _CATCH_IO_(ios_base, _Ostr)

  00165	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00168	6a 01		 push	 1
  0016a	6a 04		 push	 4
  0016c	8b 02		 mov	 eax, DWORD PTR [edx]
  0016e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00171	03 ca		 add	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00179	b8 00 00 00 00	 mov	 eax, $LN23@operator
  0017e	c3		 ret	 0
$LN23@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios
  0017f	8b 5d ec	 mov	 ebx, DWORD PTR __State$[ebp]
  00182	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN88@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 795  :     }
; 796  : 
; 797  :     _Ostr.setstate(_State);

  00189	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
$LN22@operator:
  0018c	8b 06		 mov	 eax, DWORD PTR [esi]
  0018e	6a 00		 push	 0
  00190	53		 push	 ebx
  00191	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00194	03 ce		 add	 ecx, esi
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  0019c	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  001a3	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  001a8	84 c0		 test	 al, al
  001aa	75 09		 jne	 SHORT $LN57@operator

; 118  :                 this->_Myostr._Osfx();

  001ac	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN57@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  001b5	8b 55 dc	 mov	 edx, DWORD PTR __Ok$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  001b8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ios

; 79   :         return _Mystrbuf;

  001bc	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001be	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  001c1	8b 4c 11 38	 mov	 ecx, DWORD PTR [ecx+edx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream

; 79   :             if (_Rdbuf) {

  001c5	85 c9		 test	 ecx, ecx
  001c7	74 05		 je	 SHORT $LN83@operator

; 80   :                 _Rdbuf->_Unlock();

  001c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001cb	ff 52 08	 call	 DWORD PTR [edx+8]
$LN83@operator:

; 798  :     return _Ostr;
; 799  : }

  001ce	8b c6		 mov	 eax, esi
  001d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001da	59		 pop	 ecx
  001db	5f		 pop	 edi
  001dc	5e		 pop	 esi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1001 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000e	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00011	6a 0a		 push	 10			; 0000000aH
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00018	03 ce		 add	 ecx, esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00020	0f b6 c8	 movzx	 ecx, al
  00023	51		 push	 ecx
  00024	8b ce		 mov	 ecx, esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0002c	8b ce		 mov	 ecx, esi
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi

; 1002 :     _Ostr.put(_Ostr.widen('\n'));
; 1003 :     _Ostr.flush();
; 1004 :     return _Ostr;
; 1005 : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT _main
_TEXT	SEGMENT
_c6$ = -408						; size = 64
_c5$ = -344						; size = 64
_c4$ = -280						; size = 64
_c3$ = -216						; size = 64
_c2$ = -152						; size = 64
_c1$ = -88						; size = 64
_var1$1$ = -24						; size = 4
_var2$1$ = -20						; size = 4
_var3$1$ = -16						; size = 4
_var4$1$ = -12						; size = 4
_var5$1$ = -8						; size = 4
_var6$1$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 354  : int main( int argc, char** argv ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 01 00
	00		 sub	 esp, 408		; 00000198H
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00014	8d 4d a8	 lea	 ecx, DWORD PTR _c1$[ebp]
  00017	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  0001c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  00022	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  00027	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  00032	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  00038	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  0003d	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  00043	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  00048	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  0004e	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  00053	8d 4d a8	 lea	 ecx, DWORD PTR _c1$[ebp]
  00056	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate
  0005b	be 00 01 00 00	 mov	 esi, 256		; 00000100H
$LL4@main:

; 355  : 
; 356  : 	float var1, var2, var3, var4, var5, var6;
; 357  : 	int i;
; 358  : 
; 359  : 	QPTimer c1, c2, c3, c4, c5, c6;
; 360  : 
; 361  : 	c1.Calibrate(); //calibrates timer overhead and set cronometer to zero	
; 362  : 	// measuring tests
; 363  : 	for (i=0;i<N_REPETIC;i++)
; 364  : 	{
; 365  : 		vectors_init ();
; 366  : 		c1.Start();  // start timer

  00060	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init
  00065	8d 4d a8	 lea	 ecx, DWORD PTR _c1$[ebp]
  00068	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 367  : 		var1=example(); // Do the test

  0006d	e8 00 00 00 00	 call	 ?example@@YAMXZ		; example

; 368  : 		c1.Stop();  // stop timer

  00072	8d 4d a8	 lea	 ecx, DWORD PTR _c1$[ebp]
  00075	d9 5d e8	 fstp	 DWORD PTR _var1$1$[ebp]
  00078	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 369  : 		c1.Reset();

  0007d	8d 4d a8	 lea	 ecx, DWORD PTR _c1$[ebp]
  00080	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset
  00085	83 ee 01	 sub	 esi, 1
  00088	75 d6		 jne	 SHORT $LL4@main

; 370  : 	} 
; 371  : 	// end of    testing
; 372  : 
; 373  : 	c2.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  0008a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  00090	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate
  00095	be 00 01 00 00	 mov	 esi, 256		; 00000100H
  0009a	8d 9b 00 00 00
	00		 npad	 6
$LL7@main:

; 374  : 	// measuring tests
; 375  : 	for (i=0;i<N_REPETIC;i++)
; 376  : 	{
; 377  : 		vectors_init ();

  000a0	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 378  : 		c2.Start();  // start timer

  000a5	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  000ab	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 379  : 		var2=problemA(); // Do the test

  000b0	e8 00 00 00 00	 call	 ?problemA@@YAMXZ	; problemA

; 380  : 		c2.Stop();  // stop timer

  000b5	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  000bb	d9 5d ec	 fstp	 DWORD PTR _var2$1$[ebp]
  000be	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 381  : 		c2.Reset();

  000c3	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  000c9	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset
  000ce	83 ee 01	 sub	 esi, 1
  000d1	75 cd		 jne	 SHORT $LL7@main

; 382  : 	} 
; 383  : 	// end of    testing
; 384  : 
; 385  : 	c3.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  000d3	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  000d9	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate
  000de	be 00 01 00 00	 mov	 esi, 256		; 00000100H
$LL10@main:

; 386  : 	// measuring tests
; 387  : 	for (i = 0;i < N_REPETIC;i++)
; 388  : 	{
; 389  : 		vectors_init();

  000e3	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 390  : 		c3.Start();  // start timer

  000e8	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  000ee	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 391  : 		var3 = problemB(); // Do the test

  000f3	e8 00 00 00 00	 call	 ?problemB@@YAMXZ	; problemB

; 392  : 		c3.Stop();  // stop timer

  000f8	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  000fe	d9 5d f0	 fstp	 DWORD PTR _var3$1$[ebp]
  00101	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 393  : 		c3.Reset();

  00106	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  0010c	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset
  00111	83 ee 01	 sub	 esi, 1
  00114	75 cd		 jne	 SHORT $LL10@main

; 394  : 	}
; 395  : 	// end of    testing
; 396  : 
; 397  : 	c4.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  00116	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  0011c	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate
  00121	be 00 01 00 00	 mov	 esi, 256		; 00000100H
$LL13@main:

; 398  : 	// measuring tests
; 399  : 	for (i = 0;i < N_REPETIC;i++)
; 400  : 	{
; 401  : 		vectors_init();

  00126	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 402  : 		c4.Start();  // start timer

  0012b	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  00131	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 403  : 		var4 = problemC(); // Do the test

  00136	e8 00 00 00 00	 call	 ?problemC@@YAMXZ	; problemC

; 404  : 		c4.Stop();  // stop timer

  0013b	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  00141	d9 5d f4	 fstp	 DWORD PTR _var4$1$[ebp]
  00144	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 405  : 		c4.Reset();

  00149	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  0014f	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset
  00154	83 ee 01	 sub	 esi, 1
  00157	75 cd		 jne	 SHORT $LL13@main

; 406  : 	}
; 407  : 	// end of    testing
; 408  : 
; 409  : 	c5.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  00159	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  0015f	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate
  00164	be 00 01 00 00	 mov	 esi, 256		; 00000100H
  00169	8d a4 24 00 00
	00 00		 npad	 7
$LL16@main:

; 410  : 	// measuring tests
; 411  : 	for (i = 0;i < N_REPETIC;i++)
; 412  : 	{
; 413  : 		vectors_init();

  00170	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 414  : 		c5.Start();  // start timer

  00175	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  0017b	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 415  : 		var5 = problemD1(); // Do the test

  00180	e8 00 00 00 00	 call	 ?problemD1@@YAMXZ	; problemD1

; 416  : 		c5.Stop();  // stop timer

  00185	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  0018b	d9 5d f8	 fstp	 DWORD PTR _var5$1$[ebp]
  0018e	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 417  : 		c5.Reset();

  00193	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  00199	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset
  0019e	83 ee 01	 sub	 esi, 1
  001a1	75 cd		 jne	 SHORT $LL16@main

; 418  : 	}
; 419  : 	// end of    testing
; 420  : 
; 421  : 	c6.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  001a3	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  001a9	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate
  001ae	be 00 01 00 00	 mov	 esi, 256		; 00000100H
$LL19@main:

; 422  : 	// measuring tests
; 423  : 	for (i = 0;i < N_REPETIC;i++)
; 424  : 	{
; 425  : 		vectors_init();

  001b3	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 426  : 		c6.Start();  // start timer

  001b8	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  001be	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 427  : 		var6 = problemD2(); // Do the test

  001c3	e8 00 00 00 00	 call	 ?problemD2@@YAMXZ	; problemD2

; 428  : 		c6.Stop();  // stop timer

  001c8	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  001ce	d9 5d fc	 fstp	 DWORD PTR _var6$1$[ebp]
  001d1	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 429  : 		c6.Reset();

  001d6	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  001dc	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset
  001e1	83 ee 01	 sub	 esi, 1
  001e4	75 cd		 jne	 SHORT $LL19@main

; 430  : 	}
; 431  : 	// end of    testing
; 432  : 
; 433  : 	cout << endl << "ONLY PRINTING OUTPUT VARIABLE TO PREVENT THAT THE COMPILER ELIMINATES FUNCTION CALLS: " 

  001e6	d9 45 fc	 fld	 DWORD PTR _var6$1$[ebp]
  001e9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001ee	68 00 00 00 00	 push	 OFFSET ??_C@_02KEGNLNML@?0?5@
  001f3	51		 push	 ecx
  001f4	d9 1c 24	 fstp	 DWORD PTR [esp]
  001f7	d9 45 f8	 fld	 DWORD PTR _var5$1$[ebp]
  001fa	68 00 00 00 00	 push	 OFFSET ??_C@_02KEGNLNML@?0?5@
  001ff	51		 push	 ecx
  00200	d9 1c 24	 fstp	 DWORD PTR [esp]
  00203	d9 45 f4	 fld	 DWORD PTR _var4$1$[ebp]
  00206	68 00 00 00 00	 push	 OFFSET ??_C@_02KEGNLNML@?0?5@
  0020b	51		 push	 ecx
  0020c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0020f	d9 45 f0	 fld	 DWORD PTR _var3$1$[ebp]
  00212	68 00 00 00 00	 push	 OFFSET ??_C@_02KEGNLNML@?0?5@
  00217	51		 push	 ecx
  00218	d9 1c 24	 fstp	 DWORD PTR [esp]
  0021b	d9 45 ec	 fld	 DWORD PTR _var2$1$[ebp]
  0021e	68 00 00 00 00	 push	 OFFSET ??_C@_02KEGNLNML@?0?5@
  00223	51		 push	 ecx
  00224	d9 1c 24	 fstp	 DWORD PTR [esp]
  00227	d9 45 e8	 fld	 DWORD PTR _var1$1$[ebp]
  0022a	68 00 00 00 00	 push	 OFFSET ??_C@_02KEGNLNML@?0?5@
  0022f	51		 push	 ecx
  00230	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00236	d9 1c 24	 fstp	 DWORD PTR [esp]
  00239	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@EDPCA@ONLY?5PRINTING?5OUTPUT?5VARIABLE?5T@
  0023e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0024f	83 c4 08	 add	 esp, 8
  00252	8b c8		 mov	 ecx, eax
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00260	83 c4 08	 add	 esp, 8
  00263	8b c8		 mov	 ecx, eax
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  0026b	50		 push	 eax
  0026c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00271	83 c4 08	 add	 esp, 8
  00274	8b c8		 mov	 ecx, eax
  00276	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00282	83 c4 08	 add	 esp, 8
  00285	8b c8		 mov	 ecx, eax
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  0028d	50		 push	 eax
  0028e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00293	83 c4 08	 add	 esp, 8
  00296	8b c8		 mov	 ecx, eax
  00298	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  0029e	50		 push	 eax
  0029f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002a4	83 c4 08	 add	 esp, 8
  002a7	8b c8		 mov	 ecx, eax
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  002af	50		 push	 eax
  002b0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002b5	83 c4 08	 add	 esp, 8
  002b8	8b c8		 mov	 ecx, eax
  002ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 434  : 		<< var1 << ", " << var2 << ", " << var3 << ", " << var4 << ", " << var5 << ", " << var6 << ", " << endl;
; 435  : 
; 436  : 	cout << "-Number of elements N_ELEM: " << N_ELEM << endl;

  002c0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002c5	68 00 08 00 00	 push	 2048			; 00000800H
  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HBPNMGOO@?9Number?5of?5elements?5N_ELEM?3?5@
  002cf	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002da	83 c4 08	 add	 esp, 8
  002dd	8b c8		 mov	 ecx, eax
  002df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  002e5	8b c8		 mov	 ecx, eax
  002e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 437  : 	cout << "-Number of measures example: " << c1.NumberOfMeasures() << endl;

  002ed	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002f2	8d 4d a8	 lea	 ecx, DWORD PTR _c1$[ebp]
  002f5	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  002fa	50		 push	 eax
  002fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JIOOFBOJ@?9Number?5of?5measures?5example?3?5@
  00300	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00306	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0030b	83 c4 08	 add	 esp, 8
  0030e	8b c8		 mov	 ecx, eax
  00310	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00316	8b c8		 mov	 ecx, eax
  00318	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 438  : 	cout << "-Number of measures problem: " << c2.NumberOfMeasures() << endl;

  0031e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00323	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  00329	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  0032e	50		 push	 eax
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JDDFHLHO@?9Number?5of?5measures?5problem?3?5@
  00334	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0033a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0033f	83 c4 08	 add	 esp, 8
  00342	8b c8		 mov	 ecx, eax
  00344	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0034a	8b c8		 mov	 ecx, eax
  0034c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 439  : 	cout << "-Number of measures problem: " << c3.NumberOfMeasures() << endl;

  00352	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00357	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  0035d	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  00362	50		 push	 eax
  00363	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JDDFHLHO@?9Number?5of?5measures?5problem?3?5@
  00368	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0036e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00373	83 c4 08	 add	 esp, 8
  00376	8b c8		 mov	 ecx, eax
  00378	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0037e	8b c8		 mov	 ecx, eax
  00380	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 440  : 	cout << "-Number of measures problem: " << c4.NumberOfMeasures() << endl;

  00386	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0038b	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  00391	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  00396	50		 push	 eax
  00397	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JDDFHLHO@?9Number?5of?5measures?5problem?3?5@
  0039c	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003a2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003a7	83 c4 08	 add	 esp, 8
  003aa	8b c8		 mov	 ecx, eax
  003ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  003b2	8b c8		 mov	 ecx, eax
  003b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 441  : 	cout << "-Number of measures problem: " << c5.NumberOfMeasures() << endl;

  003ba	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003bf	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  003c5	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  003ca	50		 push	 eax
  003cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JDDFHLHO@?9Number?5of?5measures?5problem?3?5@
  003d0	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003d6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003db	83 c4 08	 add	 esp, 8
  003de	8b c8		 mov	 ecx, eax
  003e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  003e6	8b c8		 mov	 ecx, eax
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 442  : 	cout << "-Number of measures problem: " << c6.NumberOfMeasures() << endl;

  003ee	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003f3	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  003f9	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  003fe	50		 push	 eax
  003ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JDDFHLHO@?9Number?5of?5measures?5problem?3?5@
  00404	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0040a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0040f	83 c4 08	 add	 esp, 8
  00412	8b c8		 mov	 ecx, eax
  00414	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0041a	8b c8		 mov	 ecx, eax
  0041c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 443  : 	cout << endl;

  00422	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00428	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 444  : 
; 445  : 	// uncomment this if more timing results were needed:
; 446  : 	/*c1.PrintMinimumTime   (" Minimum time in seconds for example is:   ");
; 447  : 	c1.PrintMeanTime      (" Mean time in seconds    for example is:   ");
; 448  : 
; 449  : 	c2.PrintMinimumCycles (" Minimum time in cycles for problem  is:   ");
; 450  : 	c2.PrintMeanCycles    (" Mean time in cycles for problem is    :   ");
; 451  : 	*/
; 452  : 
; 453  : 	c1.PrintMinimumCyclesByIteration  (" Minimum time in cycles for an element of 'example' is: ", N_ELEM);

  00433	68 00 08 00 00	 push	 2048			; 00000800H
  00438	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@FCIKOIGL@?5Minimum?5time?5in?5cycles?5for?5an?5@
  0043d	8d 4d a8	 lea	 ecx, DWORD PTR _c1$[ebp]
  00440	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 454  : 	cout << endl  ;

  00445	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0044b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00450	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 455  : 
; 456  : 	c2.PrintMinimumCyclesByIteration  (" Minimum time in cycles for an element of 'problem A' is: ", N_ELEM);

  00456	68 00 08 00 00	 push	 2048			; 00000800H
  0045b	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@KCLHKCKJ@?5Minimum?5time?5in?5cycles?5for?5an?5@
  00460	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  00466	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 457  : 	cout << endl;

  0046b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00471	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00476	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 458  : 	cout << endl;

  0047c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00482	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00487	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 459  : 
; 460  : 	c3.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'problem B' is: ", N_ELEM);

  0048d	68 00 08 00 00	 push	 2048			; 00000800H
  00492	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@CMDIKFEK@?5Minimum?5time?5in?5cycles?5for?5an?5@
  00497	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  0049d	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 461  : 	cout << endl;

  004a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004a8	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 462  : 	cout << endl;

  004b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004b9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 463  : 
; 464  : 	c4.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'problem C' is: ", N_ELEM);

  004c4	68 00 08 00 00	 push	 2048			; 00000800H
  004c9	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@OAJCKFNE@?5Minimum?5time?5in?5cycles?5for?5an?5@
  004ce	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  004d4	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 465  : 	cout << endl;

  004d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004df	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 466  : 	cout << endl;

  004ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004f0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 467  : 
; 468  : 	c5.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'problem D1' is: ", N_ELEM);

  004fb	68 00 08 00 00	 push	 2048			; 00000800H
  00500	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@PKGCCOLH@?5Minimum?5time?5in?5cycles?5for?5an?5@
  00505	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  0050b	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 469  : 	cout << endl;

  00510	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00516	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0051b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 470  : 	cout << endl;

  00521	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00527	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0052c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 471  : 
; 472  : 	c6.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'problem D2' is: ", N_ELEM);

  00532	68 00 08 00 00	 push	 2048			; 00000800H
  00537	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@HEONCJFE@?5Minimum?5time?5in?5cycles?5for?5an?5@
  0053c	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  00542	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 473  : 	cout << endl;

  00547	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0054d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00552	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 474  : 	cout << endl;

  00558	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0055e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00563	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 475  : 
; 476  : }

  00569	33 c0		 xor	 eax, eax
  0056b	5e		 pop	 esi
  0056c	8b e5		 mov	 esp, ebp
  0056e	5d		 pop	 ebp
  0056f	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT ?example@@YAMXZ
_TEXT	SEGMENT
?example@@YAMXZ PROC					; example, COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  00005	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41000000
  00012	33 c0		 xor	 eax, eax
$LL4@example:

; 342  : 	int i;
; 343  : 
; 344  : 	for (i=0;i<N_ELEM;i++)
; 345  : 	{
; 346  : 		a[i]=b[i]+8;

  00014	f3 0f 10 80 00
	00 00 00	 movss	 xmm0, DWORD PTR ?b@@3PAMA[eax]
  0001c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00020	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR ?a@@3PAMA[eax], xmm0
  00028	f3 0f 10 80 04
	00 00 00	 movss	 xmm0, DWORD PTR ?b@@3PAMA[eax+4]
  00030	f3 0f 58 c1	 addss	 xmm0, xmm1
  00034	f3 0f 11 80 04
	00 00 00	 movss	 DWORD PTR ?a@@3PAMA[eax+4], xmm0
  0003c	f3 0f 10 80 08
	00 00 00	 movss	 xmm0, DWORD PTR ?b@@3PAMA[eax+8]
  00044	f3 0f 58 c1	 addss	 xmm0, xmm1
  00048	f3 0f 11 80 08
	00 00 00	 movss	 DWORD PTR ?a@@3PAMA[eax+8], xmm0
  00050	f3 0f 10 80 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?b@@3PAMA[eax+12]
  00058	f3 0f 58 c1	 addss	 xmm0, xmm1
  0005c	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?a@@3PAMA[eax+12], xmm0
  00064	f3 0f 10 80 10
	00 00 00	 movss	 xmm0, DWORD PTR ?b@@3PAMA[eax+16]
  0006c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00070	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?a@@3PAMA[eax+16], xmm0
  00078	f3 0f 10 80 14
	00 00 00	 movss	 xmm0, DWORD PTR ?b@@3PAMA[eax+20]
  00080	f3 0f 58 c1	 addss	 xmm0, xmm1
  00084	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?a@@3PAMA[eax+20], xmm0
  0008c	f3 0f 10 80 18
	00 00 00	 movss	 xmm0, DWORD PTR ?b@@3PAMA[eax+24]
  00094	f3 0f 58 c1	 addss	 xmm0, xmm1
  00098	f3 0f 11 80 18
	00 00 00	 movss	 DWORD PTR ?a@@3PAMA[eax+24], xmm0
  000a0	f3 0f 10 80 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?b@@3PAMA[eax+28]
  000a8	f3 0f 58 c1	 addss	 xmm0, xmm1
  000ac	f3 0f 11 80 1c
	00 00 00	 movss	 DWORD PTR ?a@@3PAMA[eax+28], xmm0
  000b4	83 c0 20	 add	 eax, 32			; 00000020H
  000b7	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  000bc	0f 8c 52 ff ff
	ff		 jl	 $LL4@example

; 347  : 	}
; 348  : 	
; 349  : 	return a[N_ELEM-1 ];

  000c2	d9 05 fc 1f 00
	00		 fld	 DWORD PTR ?a@@3PAMA+8188

; 350  : }

  000c8	c3		 ret	 0
?example@@YAMXZ ENDP					; example
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT ?problemD2@@YAMXZ
_TEXT	SEGMENT
tv90 = -4						; size = 4
?problemD2@@YAMXZ PROC					; problemD2, COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	33 c9		 xor	 ecx, ecx
  00013	ba 00 00 00 00	 mov	 edx, OFFSET ?a@@3PAMA	; a
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL4@problemD2:

; 297  : 	int  i;
; 298  : 	float z = 0.0;
; 299  : 
; 300  : 	for (i = 0;i < N_ELEM;i++)

  00020	83 b9 00 00 00
	00 01		 cmp	 DWORD PTR ?cond2@@3PAHA[ecx], 1
  00027	b8 00 00 00 00	 mov	 eax, OFFSET ?b@@3PAMA	; b
  0002c	0f 44 c2	 cmove	 eax, edx
  0002f	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00034	83 c1 04	 add	 ecx, 4
  00037	f3 0f 11 45 fc	 movss	 DWORD PTR tv90[ebp], xmm0
  0003c	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00042	7c dc		 jl	 SHORT $LL4@problemD2
  00044	d9 45 fc	 fld	 DWORD PTR tv90[ebp]

; 301  : 	{
; 302  : 		// Para valores predecibles (entre 0 y 1)
; 303  : 		if (cond2[i] == 1) {
; 304  : 			z = z + a[i];
; 305  : 		}
; 306  : 		else {
; 307  : 			z = z + b[i];
; 308  : 		}
; 309  : 
; 310  : 	}
; 311  : 
; 312  : 	return z;
; 313  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?problemD2@@YAMXZ ENDP					; problemD2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT ?problemD1@@YAMXZ
_TEXT	SEGMENT
tv90 = -4						; size = 4
?problemD1@@YAMXZ PROC					; problemD1, COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	33 c9		 xor	 ecx, ecx
  00013	ba 00 00 00 00	 mov	 edx, OFFSET ?a@@3PAMA	; a
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL4@problemD1:

; 251  : 	int  i;
; 252  : 	float z = 0.0;
; 253  : 
; 254  : 	for (i=0;i<N_ELEM;i++)

  00020	83 b9 00 00 00
	00 01		 cmp	 DWORD PTR ?cond1@@3PAHA[ecx], 1
  00027	b8 00 00 00 00	 mov	 eax, OFFSET ?b@@3PAMA	; b
  0002c	0f 44 c2	 cmove	 eax, edx
  0002f	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00034	83 c1 04	 add	 ecx, 4
  00037	f3 0f 11 45 fc	 movss	 DWORD PTR tv90[ebp], xmm0
  0003c	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00042	7c dc		 jl	 SHORT $LL4@problemD1
  00044	d9 45 fc	 fld	 DWORD PTR tv90[ebp]

; 255  : 	{
; 256  : 		// Para valores MUY facilmente predecibles (todos son 1)
; 257  : 		if (cond1[i] == 1) {
; 258  : 			z = z + a[i];
; 259  : 		}
; 260  : 		else {
; 261  : 			z = z + b[i];
; 262  : 		}
; 263  : 		
; 264  : 	}
; 265  : 
; 266  : 	return z;
; 267  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?problemD1@@YAMXZ ENDP					; problemD1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT ?problemC@@YAMXZ
_TEXT	SEGMENT
tv90 = -4						; size = 4
?problemC@@YAMXZ PROC					; problemC, COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	33 c9		 xor	 ecx, ecx
  00013	ba 00 00 00 00	 mov	 edx, OFFSET ?a@@3PAMA	; a
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL4@problemC:

; 205  : 	int  i;
; 206  : 	float z = 0.0;
; 207  : 
; 208  : 	for (i=0;i<N_ELEM;i++)

  00020	83 b9 00 00 00
	00 01		 cmp	 DWORD PTR ?cond3@@3PAHA[ecx], 1
  00027	b8 00 00 00 00	 mov	 eax, OFFSET ?b@@3PAMA	; b
  0002c	0f 44 c2	 cmove	 eax, edx
  0002f	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00034	83 c1 04	 add	 ecx, 4
  00037	f3 0f 11 45 fc	 movss	 DWORD PTR tv90[ebp], xmm0
  0003c	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00042	7c dc		 jl	 SHORT $LL4@problemC
  00044	d9 45 fc	 fld	 DWORD PTR tv90[ebp]

; 209  : 	{
; 210  : 		// cond3 contiene valores aleatorios (entre 0 y 1) dificilmente predecibles
; 211  : 		if (cond3[i] == 1) {
; 212  : 			z = z + a[i];
; 213  : 		}
; 214  : 		else {
; 215  : 			z = z + b[i];
; 216  : 		}
; 217  : 		
; 218  : 	}
; 219  : 
; 220  : 	return z; 
; 221  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?problemC@@YAMXZ ENDP					; problemC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT ?problemB@@YAMXZ
_TEXT	SEGMENT
_z$ = -4						; size = 4
?problemB@@YAMXZ PROC					; problemB, COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	33 c0		 xor	 eax, eax
  00013	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$LL4@problemB:

; 163  : 	int  i;
; 164  : 	float z = 0.0;
; 165  : 
; 166  : 	for (i=0;i<N_ELEM;i++)
; 167  : 	{
; 168  : 		// Suma de dos vectores
; 169  : 		z = z + (a[i] + b[i]);

  00020	f3 0f 10 88 00
	00 00 00	 movss	 xmm1, DWORD PTR ?b@@3PAMA[eax]
  00028	f3 0f 58 88 00
	00 00 00	 addss	 xmm1, DWORD PTR ?a@@3PAMA[eax]
  00030	f3 0f 58 c8	 addss	 xmm1, xmm0
  00034	f3 0f 10 80 04
	00 00 00	 movss	 xmm0, DWORD PTR ?a@@3PAMA[eax+4]
  0003c	f3 0f 58 80 04
	00 00 00	 addss	 xmm0, DWORD PTR ?b@@3PAMA[eax+4]
  00044	f3 0f 58 c8	 addss	 xmm1, xmm0
  00048	f3 0f 10 80 08
	00 00 00	 movss	 xmm0, DWORD PTR ?a@@3PAMA[eax+8]
  00050	f3 0f 58 80 08
	00 00 00	 addss	 xmm0, DWORD PTR ?b@@3PAMA[eax+8]
  00058	f3 0f 58 c8	 addss	 xmm1, xmm0
  0005c	f3 0f 10 80 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?a@@3PAMA[eax+12]
  00064	f3 0f 58 80 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?b@@3PAMA[eax+12]
  0006c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00070	f3 0f 10 80 10
	00 00 00	 movss	 xmm0, DWORD PTR ?a@@3PAMA[eax+16]
  00078	f3 0f 58 80 10
	00 00 00	 addss	 xmm0, DWORD PTR ?b@@3PAMA[eax+16]
  00080	f3 0f 58 c8	 addss	 xmm1, xmm0
  00084	f3 0f 10 80 14
	00 00 00	 movss	 xmm0, DWORD PTR ?a@@3PAMA[eax+20]
  0008c	f3 0f 58 80 14
	00 00 00	 addss	 xmm0, DWORD PTR ?b@@3PAMA[eax+20]
  00094	f3 0f 58 c8	 addss	 xmm1, xmm0
  00098	f3 0f 10 80 18
	00 00 00	 movss	 xmm0, DWORD PTR ?a@@3PAMA[eax+24]
  000a0	f3 0f 58 80 18
	00 00 00	 addss	 xmm0, DWORD PTR ?b@@3PAMA[eax+24]
  000a8	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ac	f3 0f 10 80 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?a@@3PAMA[eax+28]
  000b4	f3 0f 58 80 1c
	00 00 00	 addss	 xmm0, DWORD PTR ?b@@3PAMA[eax+28]
  000bc	83 c0 20	 add	 eax, 32			; 00000020H
  000bf	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c3	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  000c8	0f 8c 52 ff ff
	ff		 jl	 $LL4@problemB
  000ce	f3 0f 11 45 fc	 movss	 DWORD PTR _z$[ebp], xmm0

; 170  : 
; 171  : 		// Otra forma: Suma de un vector y una constante
; 172  : 		// z = z + (a[i] + 3.0);
; 173  : 	}
; 174  : 
; 175  : 	return z;

  000d3	d9 45 fc	 fld	 DWORD PTR _z$[ebp]

; 176  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
?problemB@@YAMXZ ENDP					; problemB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT ?problemA@@YAMXZ
_TEXT	SEGMENT
_z$ = -4						; size = 4
?problemA@@YAMXZ PROC					; problemA, COMDAT

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	b8 04 00 00 00	 mov	 eax, OFFSET ?a@@3PAMA+4
  00016	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL4@problemA:

; 125  : 	int  i;
; 126  : 	float z = 0.0; 
; 127  : 
; 128  : 	for (i=0;i<N_ELEM;i++)
; 129  : 	{
; 130  : 		z = z + a[i];

  00020	f3 0f 58 40 fc	 addss	 xmm0, DWORD PTR [eax-4]
  00025	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00029	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0002e	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00033	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  00038	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  0003d	f3 0f 58 40 14	 addss	 xmm0, DWORD PTR [eax+20]
  00042	f3 0f 58 40 18	 addss	 xmm0, DWORD PTR [eax+24]
  00047	83 c0 20	 add	 eax, 32			; 00000020H
  0004a	3d 04 20 00 00	 cmp	 eax, OFFSET ?a@@3PAMA+8196
  0004f	7c cf		 jl	 SHORT $LL4@problemA
  00051	f3 0f 11 45 fc	 movss	 DWORD PTR _z$[ebp], xmm0

; 131  : 	}
; 132  : 
; 133  : 	return z;

  00056	d9 45 fc	 fld	 DWORD PTR _z$[ebp]

; 134  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?problemA@@YAMXZ ENDP					; problemA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT ?vectors_init@@YAXXZ
_TEXT	SEGMENT
?vectors_init@@YAXXZ PROC				; vectors_init, COMDAT

; 62   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  00007	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  00012	33 f6		 xor	 esi, esi
$LL4@vectors_in:

; 63   : 	int i;
; 64   : 	for (i=0;i<N_ELEM;i++)
; 65   : 	{
; 66   : 		// a[i] must have little values to avoid overflow in pp1()
; 67   : 		a[i]=(float)rand()/(float)RAND_MAX;
; 68   : 		b[i]=(float)i/5;

  00014	ff d7		 call	 edi
  00016	f3 0f 2a ce	 cvtsi2ss xmm1, esi

; 69   : 		c[i]=(float)i/6;
; 70   : 		d[i]=(float)i/7;
; 71   : 		e[i]=(float)i/8;
; 72   : 		f[i]=(float)i/9;
; 73   : 		g[i]=(float)i/10;
; 74   : 		h[i]=(float)i/11;
; 75   : 
; 76   : 		a_int[i]=i;

  0001a	89 34 b5 00 00
	00 00		 mov	 DWORD PTR ?a_int@@3PAHA[esi*4], esi

; 77   : 
; 78   : 		cond1[i]=1;

  00021	c7 04 b5 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?cond1@@3PAHA[esi*4], 1
  0002c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00030	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@38000100
  00038	f3 0f 11 04 b5
	00 00 00 00	 movss	 DWORD PTR ?a@@3PAMA[esi*4], xmm0
  00041	0f 28 c1	 movaps	 xmm0, xmm1
  00044	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e4ccccd
  0004c	f3 0f 11 04 b5
	00 00 00 00	 movss	 DWORD PTR ?b@@3PAMA[esi*4], xmm0
  00055	0f 28 c1	 movaps	 xmm0, xmm1
  00058	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e2aaaab
  00060	f3 0f 11 04 b5
	00 00 00 00	 movss	 DWORD PTR ?c@@3PAMA[esi*4], xmm0
  00069	0f 28 c1	 movaps	 xmm0, xmm1
  0006c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e124925
  00074	f3 0f 11 04 b5
	00 00 00 00	 movss	 DWORD PTR ?d@@3PAMA[esi*4], xmm0
  0007d	0f 28 c1	 movaps	 xmm0, xmm1
  00080	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e000000
  00088	f3 0f 11 04 b5
	00 00 00 00	 movss	 DWORD PTR ?e@@3PAMA[esi*4], xmm0
  00091	0f 28 c1	 movaps	 xmm0, xmm1
  00094	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3de38e39
  0009c	f3 0f 11 04 b5
	00 00 00 00	 movss	 DWORD PTR ?f@@3PAMA[esi*4], xmm0
  000a5	0f 28 c1	 movaps	 xmm0, xmm1
  000a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3dcccccd
  000b0	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3dba2e8c
  000b8	f3 0f 11 04 b5
	00 00 00 00	 movss	 DWORD PTR ?g@@3PAMA[esi*4], xmm0
  000c1	f3 0f 11 0c b5
	00 00 00 00	 movss	 DWORD PTR ?h@@3PAMA[esi*4], xmm1

; 79   : 		cond3[i]=rand()%2;

  000ca	ff d7		 call	 edi
  000cc	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000d1	79 05		 jns	 SHORT $LN17@vectors_in
  000d3	48		 dec	 eax
  000d4	83 c8 fe	 or	 eax, -2			; fffffffeH
  000d7	40		 inc	 eax
$LN17@vectors_in:
  000d8	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?cond3@@3PAHA[esi*4], eax
  000df	46		 inc	 esi
  000e0	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  000e6	0f 8c 28 ff ff
	ff		 jl	 $LL4@vectors_in

; 80   : 	}
; 81   : 
; 82   : 	for (i=0;i<N_ELEM;i+=8)

  000ec	5f		 pop	 edi
  000ed	b8 04 00 00 00	 mov	 eax, OFFSET ?cond2@@3PAHA+4
  000f2	5e		 pop	 esi
$LL7@vectors_in:

; 83   : 	{
; 84   : 		// put here the pattern behaviour  you want; BTB is very clever !!
; 85   : 		cond2[i+0]=1;

  000f3	c7 40 fc 01 00
	00 00		 mov	 DWORD PTR [eax-4], 1

; 86   : 		cond2[i+1]=0;

  000fa	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 87   : 		cond2[i+2]=1;

  00100	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1

; 88   : 		cond2[i+3]=1;

  00107	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1

; 89   : 		cond2[i+4]=0;

  0010e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 90   : 		cond2[i+5]=1;

  00115	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 91   : 		cond2[i+6]=1;

  0011c	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1

; 92   : 		cond2[i+7]=1;

  00123	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1
  0012a	83 c0 20	 add	 eax, 32			; 00000020H
  0012d	3d 04 20 00 00	 cmp	 eax, OFFSET ?cond2@@3PAHA+8196
  00132	7c bf		 jl	 SHORT $LL7@vectors_in

; 93   : 	}
; 94   : }

  00134	c3		 ret	 0
?vectors_init@@YAXXZ ENDP				; vectors_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  00005	e9 00 00 00 00	 jmp	 @__CheckForDebuggerJustMyCode@4
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\aleja\Documents\Repositorios\ASD\Trabajos\I. 3C - Límites ILP\p3c_presentacion_alumnos_VS2103_RDTSC\p3c_rdtsc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET __438567F7_p3c_rdtsc@cpp
  00005	e9 00 00 00 00	 jmp	 @__CheckForDebuggerJustMyCode@4
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
